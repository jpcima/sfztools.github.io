<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>sfizz_create_synth</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a5833814d7befbccc93c93700b036dc00</Anchor>
    <Abstract>Creates a sfizz synth.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_free</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a47fbf4b15adb59175fcaa234c24d99c0</Anchor>
    <Abstract>Frees an existing sfizz synth.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_load_file</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a3b52ff6e9ad7a8d7e9f5b60d010311ca</Anchor>
    <Abstract>Loads an SFZ file.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_regions</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a99743b62aa4a56b6af89eb40bb8c78bc</Anchor>
    <Abstract>Returns the number of regions in the currently loaded SFZ file.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_groups</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a5610a937429837a02b88aa710b7daa59</Anchor>
    <Abstract>Returns the number of groups in the currently loaded SFZ file.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_masters</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a1a58b63f5284066396337e2a9fa87858</Anchor>
    <Abstract>Returns the number of masters in the currently loaded SFZ file.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_curves</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>ae99e2a39ed7e908625b942faf315bbde</Anchor>
    <Abstract>Returns the number of curves in the currently loaded SFZ file.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_export_midnam</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>aa065eb3d93eb08f0148a8011192598ab</Anchor>
    <Abstract>Export a MIDI Name document describing the the currently loaded SFZ file.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_preloaded_samples</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a2d4791d1f40ae976f5bbbb7573955511</Anchor>
    <Abstract>Returns the number of preloaded samples for the current SFZ file.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_active_voices</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a96c434533f95022ed907ba5270679902</Anchor>
    <Abstract>Returns the number of active voices.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_samples_per_block</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>ad31787b359d564f7ec930373596af801</Anchor>
    <Abstract>Sets the expected number of samples per block.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_sample_rate</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a405d0f8f3ba3605b39c6bf5f21968e42</Anchor>
    <Abstract>Sets the sample rate for the synth.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_send_note_on</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a8138cb3f374c5ebc25d2f8de61b60a8d</Anchor>
    <Abstract>Send a note on event to the synth.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_send_note_off</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a2cff4a46cf2efe947a820068be8ab374</Anchor>
    <Abstract>Send a note off event to the synth.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_send_cc</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a0f951e0297fa4faff0457f3ef99a9530</Anchor>
    <Abstract>Send a CC event to the synth.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_send_pitch_wheel</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>aa37aa3daabbba80a2497eb4a2e604b1a</Anchor>
    <Abstract>Send a pitch wheel event.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_send_aftertouch</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a1955b112fa8fa7162c665ada79d3badd</Anchor>
    <Abstract>Send an aftertouch event.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_send_tempo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a5e24f99a94ee71cb5bd2dfa48e2b7ea0</Anchor>
    <Abstract>Send a tempo event.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_render_block</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a40757584901175974d05d687570bd39a</Anchor>
    <Abstract>Render a block audio data into a stereo channel.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_preload_size</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>afe62939ce7648c1c4c4c7bc2a5bf7191</Anchor>
    <Abstract>Get the size of the preloaded data.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_preload_size</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a674c7e0a28e241c5e82e59d01246e373</Anchor>
    <Abstract>Sets the size of the preloaded data in number of floats (not bytes).</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_oversampling_factor</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>ad9edc40593d05de8b2ea95bcb63fce4e</Anchor>
    <Abstract>Get the internal oversampling rate.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_oversampling_factor</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a8a0b832acb46c28bb9928275cf771d75</Anchor>
    <Abstract>Set the internal oversampling rate.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_volume</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>ae7efac24193ff27b80adcc4a5c5e96cb</Anchor>
    <Abstract>Set the global instrument volume.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_volume</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>ad8db0c89467abc4de0ff0b214b3fbadb</Anchor>
    <Abstract>Get the global instrument volume.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_num_voices</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a77ab0c8b6eaf0b2256823a2b6502585d</Anchor>
    <Abstract>Sets the number of voices used by the synth.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_voices</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>afeed08b80c4c2d5a0913dab88a22a153</Anchor>
    <Abstract>Returns the number of voices.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_buffers</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>aa4c60d91e0414eb3516828b7226ea99a</Anchor>
    <Abstract>Get the number of allocated buffers from the synth.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_bytes</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a3c594195d40428a5d79f02cb274afc5a</Anchor>
    <Abstract>Get the number of bytes allocated from the synth.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_enable_freewheeling</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a9d18eaf0d9b17546655633483d5c534a</Anchor>
    <Abstract>Enables freewheeling on the synth.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_disable_freewheeling</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>af0236d41298634d5715f0bd15367db22</Anchor>
    <Abstract>Disables freewheeling on the synth.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_unknown_opcodes</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a5fc5960d946b347d8c6b314e9ce68691</Anchor>
    <Abstract>Get a comma separated list of unknown opcodes.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_should_reload_file</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a5361eee6fe64da7e0f0cf200a900620b</Anchor>
    <Abstract>Check if the SFZ should be reloaded.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_enable_logging</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>ab6111086af779304b5653d3bd39d6fea</Anchor>
    <Abstract>Enable logging of timings to sidecar CSV files.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_disable_logging</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>ad92ca48e4b74dee5733098395103fe95</Anchor>
    <Abstract>Disable logging.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_logging_prefix</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a9806934bf0e8656354b6715540a0f8eb</Anchor>
    <Abstract>Enable logging of timings to sidecar CSV files.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_all_sound_off</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a2fdac76fc04b724935d0554c44166f92</Anchor>
    <Abstract>Shuts down the current processing, clear buffers and reset the voices.</Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>power2</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>ad13871a1e1e1a87d86eaf5280cfecaa0</Anchor>
    <Abstract>Compute the square of the value.</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>db2pow</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>a752b4e294bd04340af53271c4f2875f1</Anchor>
    <Abstract>Converts db values into power (applies 10**(in/10))</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow2db</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>af01e41fe4cf56c50b1782c28b923446e</Anchor>
    <Abstract>Converts power values into dB (applies 10log10(in))</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>db2mag</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>ae6c8aa42d4e978cc8b46a1a3664d7c17</Anchor>
    <Abstract>Converts dB values to magnitude (applies 10**(in/20))</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mag2db</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>a150bd704b95b8d854bbc52102031cd43</Anchor>
    <Abstract>Converts magnitude values into dB (applies 20log10(in))</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>midiNoteFrequency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>a5453a70c90a3c9f00502e2b62e534aed</Anchor>
    <Abstract>Converts a midi note to a frequency value.</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clamp</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>a84c36a4fe27bb1788d1afb8fd3a96601</Anchor>
    <Abstract>Clamps a value between bounds, including the bounds!</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fp_sign</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>aadbf97b8d63dba5fb46c4668010da02d</Anchor>
    <Abstract>Get the sign part of a IEEE754 floating point number.</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fp_exponent</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>a69586298c4c7180d9142f5b453f20f42</Anchor>
    <Abstract>Get the exponent part of a IEEE754 floating point number.</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fp_mantissa</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>af3180620f8894f32eef76ff2489d3aef</Anchor>
    <Abstract>Get the mantissa part of a IEEE754 floating point number.</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fp_from_parts</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>ae21f29d4e1356b5b6341ca0e2f480d4b</Anchor>
    <Abstract>Reconstruct a IEEE754 floating point number from its parts.</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readInterleaved</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a91425402d9ab9ea06c43f2b50deceff7</Anchor>
    <Abstract>Read interleaved stereo data from a buffer and separate it in a left/right pair of buffers.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>writeInterleaved</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a187a894c21d22a6571c6fe2a9394228f</Anchor>
    <Abstract>Write a pair of left and right stereo input into a single buffer interleaved.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a1a5601af5f6d2113fdda2394fd7b00a0</Anchor>
    <Abstract>Fill a buffer with a value; comparable to std::fill in essence.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>acb3fd29a957ebca6df035ba30e155f35</Anchor>
    <Abstract>Exp math function.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>adc574b28974cd1bd8af7dee2c2cdb24f</Anchor>
    <Abstract>Log math function.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a92c69c4723a06f6e692ddfee094420fb</Anchor>
    <Abstract>sin math function</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a921cd12917ee9b0eb2a60b5d50f1881c</Anchor>
    <Abstract>cos math function</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>saturatingSFZIndex</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a3c7883329dc3ff5455577487a444b5e8</Anchor>
    <Abstract>Computes an integer index and 2 float coefficients corresponding to the linear interpolation procedur...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loopingSFZIndex</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>af6a4868395156fa7a5cd3a12277e3cab</Anchor>
    <Abstract>Computes an integer index and 2 float coefficients corresponding to the linear interpolation procedur...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a26799677f2d57c4714d2bc514a938b58</Anchor>
    <Abstract>Applies a scalar gain to the input.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a2e3b072204d32b7da439d392cbd2901f</Anchor>
    <Abstract>Applies a vector gain to an input stap.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a732911d2f0a67e80de4799cf480189c1</Anchor>
    <Abstract>Applies a scalar gain in-place on a span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a4de51e21a6941c416de0156d5c270f77</Anchor>
    <Abstract>Applies a vector gain in-place on a span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divide</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>add0737429e53441b7180f723e157442f</Anchor>
    <Abstract>Divide a vector by another vector.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divide</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>abe9b2f81370eed27891f98fe86e82ee1</Anchor>
    <Abstract>Divide a vector by another in place.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>multiplyAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>afc467c5a4f960d8a8afa9516e4020c5e</Anchor>
    <Abstract>Applies a gain to the input and add it on the output.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linearRamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a856b9e5f41439a7443e3fb6e010f8d13</Anchor>
    <Abstract>Compute a linear ramp blockwise between 2 values.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>multiplicativeRamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ae9103c48dd4d2a8339524f8f5d4136fa</Anchor>
    <Abstract>Compute a multiplicative ramp blockwise between 2 values.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ad0acbcd13727eee5b84f4a7e92377e40</Anchor>
    <Abstract>Add an input span to the output span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subtract</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a671c6bbf8866dbeac68ed3b887a705a5</Anchor>
    <Abstract>Subtract a value from a span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subtract</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>acb0d4e00d9e7d95051a90753331f2c53</Anchor>
    <Abstract>Subtract a span from another span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>af3f98787f6ed2987d28ffdc0ca5bdc4a</Anchor>
    <Abstract>Copy a span in another.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a3e5453bbc1c786fad5635026eebeaded</Anchor>
    <Abstract>Pans a mono signal left or right.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a50a603b6fd13732140b7c9fd026a7eee</Anchor>
    <Abstract>Controls the width of a stereo signal, setting it to mono when width = 0 and inverting the channels w...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mean</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a699ab4ea2fc4d6179cbd6c4dd9a2f07b</Anchor>
    <Abstract>Computes the mean of a span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>meanSquared</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a4b3086cab227e08d1b22a4e385388127</Anchor>
    <Abstract>Computes the mean squared of a span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cumsum</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a7d68cfdcf6c011ab2b27841b2f37a33a</Anchor>
    <Abstract>Computes the cumulative sum of a span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfzInterpolationCast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a486b854fada90cb158ee8391466d42a7</Anchor>
    <Abstract>Computes the linear interpolation coefficients for a floating point index and extracts the integer in...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>diff</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>aea56d9a29c3d47631dfe237d7041d382</Anchor>
    <Abstract>Computes the differential of a span (successive differences).</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trimInPlace</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_string_view_helpers_8h.html</Path>
    <Anchor>a950bfd99293f5c81bfe061b77a9c01fc</Anchor>
    <Abstract>Removes the whitespace on a string_view in place.</Abstract>
    <DeclaredIn>StringViewHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trim</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_string_view_helpers_8h.html</Path>
    <Anchor>a99fe15ad89227a5573b4271c5c09162d</Anchor>
    <Abstract>Removes the whitespace on a string_view and return a new string_view.</Abstract>
    <DeclaredIn>StringViewHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_string_view_helpers_8h.html</Path>
    <Anchor>a0d70224bb798d5b61584ca93597224a6</Anchor>
    <Abstract>Compile-time hashing function to be used mostly with switch/case statements.</Abstract>
    <DeclaredIn>StringViewHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hashNoAmpersand</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_string_view_helpers_8h.html</Path>
    <Anchor>a551b83b8ed9ce2569b25ed1918f24d3f</Anchor>
    <Abstract>Same function as hash() but ignores ampersands (&amp;)</Abstract>
    <DeclaredIn>StringViewHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_doxygen_pages_engine_description</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md_doxygen_pages_engine_description.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_src_external_pugixml_LICENSE</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md_src_external_pugixml__l_i_c_e_n_s_e.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FP_traits</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FP_traits</Scope>
    </TokenIdentifier>
    <Path>struct_f_p__traits.html</Path>
    <Abstract>Characteristics of IEEE754 floating point representations.</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Fraction</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Fraction</Scope>
    </TokenIdentifier>
    <Path>struct_fraction.html</Path>
    <Abstract>A fraction which is parameterized by integer type.</Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScopedFTZ</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ScopedFTZ</Scope>
    </TokenIdentifier>
    <Path>class_scoped_f_t_z.html</Path>
    <Abstract>Flush floating points to zero and disable denormals as an RAII helper.</Abstract>
    <DeclaredIn>ScopedFTZ.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Spline</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Spline</Scope>
    </TokenIdentifier>
    <Path>class_spline.html</Path>
    <Abstract>Cubic spline interpolation is a simple way to obtain a smooth curve from a set of discrete points.</Abstract>
    <DeclaredIn>spline.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Random</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Random</Scope>
    </TokenIdentifier>
    <Path>namespace_random.html</Path>
    <Abstract>Global random singletons.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Abstract>This file contains a pair of RAII helpers that handle some form of lock-free mutex-type protection ad...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ccSwitchedValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a4de362e3da8a44f9c8d4e222fdeedada</Anchor>
    <Abstract>A description for an SFZ envelope generator, with its envelope parameters and possible CC modulation.</Abstract>
    <DeclaredIn>EGDescription.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a8d1e1f13e28869bb010ca42494d23ca7</Anchor>
    <Abstract>Read a value from the sfz file and cast it to the destination parameter along with a proper clamping ...</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readBooleanFromOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a1e79b5c1153af2378ddeb5ef1af2e108</Anchor>
    <Abstract>Read a boolean value from the sfz file and cast it to the destination parameter.</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setValueFromOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a83aae00d3fce9c8f65838d7b3a1ee5e9</Anchor>
    <Abstract>Set a target parameter from an opcode value, with possibly a textual note rather than a number.</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setValueFromOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a31aeb210ef9bc2aae030c9979a8a2cc0</Anchor>
    <Abstract>Set a target parameter from an opcode value, with possibly a textual note rather than a number.</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setRangeEndFromOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a38e52ee55b8e40f517f2a43c57931aa6</Anchor>
    <Abstract>Set a target end of a range from an opcode value, with possibly a textual note rather than a number.</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setRangeStartFromOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a6a2f75efbbcdb47c66cf32f18bb207ba</Anchor>
    <Abstract>Set a target beginning of a range from an opcode value, with possibly a textual note rather than a nu...</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setCCPairFromOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a416be4972d39c9872b48748cec4a0370</Anchor>
    <Abstract>Set a CC modulation parameter from an opcode value.</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>centsFactor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ace381c89be8ea56969614a371b7edae2</Anchor>
    <Abstract>Converts cents to a pitch ratio.</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>normalizeCC</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a9b65015c18e6461f96cb9af4e30cdee8</Anchor>
    <Abstract>Normalize a CC value between 0.0 and 1.0.</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>normalizeVelocity</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a6fd3f3f2641b8065321f00b8e2e3cbec</Anchor>
    <Abstract>Normalize a velocity between 0.0 and 1.0.</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>normalizePercents</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ac1f49ce61c8d1db977f17efc4ee199bf</Anchor>
    <Abstract>Normalize a percentage between 0 and 1.</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>normalizeBend</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a082ee2dc6715392c07a5f6a5216c537b</Anchor>
    <Abstract>Normalize bends between -1 and 1.</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readNoteValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>afc410e944cee93f0c4a0cf44279ebe5d</Anchor>
    <Abstract>Convert a note in string to its equivalent midi note number.</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>findHeader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a62f12e86de3f5c188a3a46840ded9030</Anchor>
    <Abstract>From a source view, find the next sfz header and its members and return them, while updating the sour...</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>findOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a2fd5bcf4ef8db620c9ce8dd153637e80</Anchor>
    <Abstract>From a source view, find the next sfz member opcode and its value.</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>findDefine</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a0154fe33ffa4619bd53939364a8cbe27</Anchor>
    <Abstract>Find an SFZ #define statement on a line and return the variable and value as views.</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>findInclude</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ad493a0ef0d896c138a235f3b1d63d136</Anchor>
    <Abstract>Find an SFZ #include statement on a line and return included path.</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>multiplyByCentsModifier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a2142328ed235d230759b27ab1aaad849</Anchor>
    <Abstract>multiply a value by a factor, in cents.</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>crossfadeIn</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a0294dddb43d352eb2e7db8c2b4f3baa7</Anchor>
    <Abstract>Compute a crossfade in value with respect to a crossfade range (note, velocity, cc,...</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>crossfadeOut</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a9a52f2b53d9812bc9e95d1d8eef776d4</Anchor>
    <Abstract>Compute a crossfade out value with respect to a crossfade range (note, velocity, cc,...</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readInterleaved</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a91425402d9ab9ea06c43f2b50deceff7</Anchor>
    <Abstract>Read interleaved stereo data from a buffer and separate it in a left/right pair of buffers.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>writeInterleaved</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a187a894c21d22a6571c6fe2a9394228f</Anchor>
    <Abstract>Write a pair of left and right stereo input into a single buffer interleaved.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a1a5601af5f6d2113fdda2394fd7b00a0</Anchor>
    <Abstract>Fill a buffer with a value; comparable to std::fill in essence.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>acb3fd29a957ebca6df035ba30e155f35</Anchor>
    <Abstract>Exp math function.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>adc574b28974cd1bd8af7dee2c2cdb24f</Anchor>
    <Abstract>Log math function.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a92c69c4723a06f6e692ddfee094420fb</Anchor>
    <Abstract>sin math function</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a921cd12917ee9b0eb2a60b5d50f1881c</Anchor>
    <Abstract>cos math function</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>saturatingSFZIndex</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a3c7883329dc3ff5455577487a444b5e8</Anchor>
    <Abstract>Computes an integer index and 2 float coefficients corresponding to the linear interpolation procedur...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loopingSFZIndex</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>af6a4868395156fa7a5cd3a12277e3cab</Anchor>
    <Abstract>Computes an integer index and 2 float coefficients corresponding to the linear interpolation procedur...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a26799677f2d57c4714d2bc514a938b58</Anchor>
    <Abstract>Applies a scalar gain to the input.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a2e3b072204d32b7da439d392cbd2901f</Anchor>
    <Abstract>Applies a vector gain to an input stap.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a732911d2f0a67e80de4799cf480189c1</Anchor>
    <Abstract>Applies a scalar gain in-place on a span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a4de51e21a6941c416de0156d5c270f77</Anchor>
    <Abstract>Applies a vector gain in-place on a span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divide</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>add0737429e53441b7180f723e157442f</Anchor>
    <Abstract>Divide a vector by another vector.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divide</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>abe9b2f81370eed27891f98fe86e82ee1</Anchor>
    <Abstract>Divide a vector by another in place.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>multiplyAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>afc467c5a4f960d8a8afa9516e4020c5e</Anchor>
    <Abstract>Applies a gain to the input and add it on the output.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linearRamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a856b9e5f41439a7443e3fb6e010f8d13</Anchor>
    <Abstract>Compute a linear ramp blockwise between 2 values.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>multiplicativeRamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ae9103c48dd4d2a8339524f8f5d4136fa</Anchor>
    <Abstract>Compute a multiplicative ramp blockwise between 2 values.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ad0acbcd13727eee5b84f4a7e92377e40</Anchor>
    <Abstract>Add an input span to the output span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subtract</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a671c6bbf8866dbeac68ed3b887a705a5</Anchor>
    <Abstract>Subtract a value from a span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subtract</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>acb0d4e00d9e7d95051a90753331f2c53</Anchor>
    <Abstract>Subtract a span from another span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>af3f98787f6ed2987d28ffdc0ca5bdc4a</Anchor>
    <Abstract>Copy a span in another.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a3e5453bbc1c786fad5635026eebeaded</Anchor>
    <Abstract>Pans a mono signal left or right.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a50a603b6fd13732140b7c9fd026a7eee</Anchor>
    <Abstract>Controls the width of a stereo signal, setting it to mono when width = 0 and inverting the channels w...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mean</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a699ab4ea2fc4d6179cbd6c4dd9a2f07b</Anchor>
    <Abstract>Computes the mean of a span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>meanSquared</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a4b3086cab227e08d1b22a4e385388127</Anchor>
    <Abstract>Computes the mean squared of a span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cumsum</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a7d68cfdcf6c011ab2b27841b2f37a33a</Anchor>
    <Abstract>Computes the cumulative sum of a span.</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfzInterpolationCast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a486b854fada90cb158ee8391466d42a7</Anchor>
    <Abstract>Computes the linear interpolation coefficients for a floating point index and extracts the integer in...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>diff</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>aea56d9a29c3d47631dfe237d7041d382</Anchor>
    <Abstract>Computes the differential of a span (successive differences).</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::ADSREnvelope</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Abstract>Describe an attack/delay/sustain/release envelope that can produce its coefficient in a blockwise man...</Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>a10bbd7f69265b827ed46be5939fb2637</Anchor>
    <Abstract>Resets the ADSR envelope given a Region, the current midi state, and a delay and trigger velocity.</Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNextValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>a655b834febc118a33306e518af65e8dd</Anchor>
    <Abstract>Get the next value for the envelope.</Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>aa94251ebed9584e93405c96302ba1996</Anchor>
    <Abstract>Get a block of values for the envelope.</Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>startRelease</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>a6bdda7f21f8c8baefa21c0ba9a6bc7ab</Anchor>
    <Abstract>Start the envelope release after a delay.</Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isSmoothing</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>a5760b48952d2b2ab265d3ffc77637891</Anchor>
    <Abstract>Is the envelope smoothing?</Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isReleased</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>acbb1e641bc5e60883ffa16f0b42caa26</Anchor>
    <Abstract>Is the envelope released?</Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRemainingDelay</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>a57f867c1ea82280867128becd6514d6f</Anchor>
    <Abstract>Get the remaining delay samples.</Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::AtomicDisabler</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::AtomicDisabler</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_atomic_disabler.html</Path>
    <Abstract>Simple class to set an atomic to false and automatically set it back to true on destruction.</Abstract>
    <DeclaredIn>AtomicGuard.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::AtomicGuard</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::AtomicGuard</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_atomic_guard.html</Path>
    <Abstract>Simple class to set an atomic to true and automatically set it back to false on destruction.</Abstract>
    <DeclaredIn>AtomicGuard.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::AudioBuffer</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Abstract>A class to handle a collection of buffers, where each buffer has the same size.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a4bafdd16884645d66848542d0341bbf4</Anchor>
    <Abstract>Construct a new Audio Buffer object.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a94d656cec7a7409248a1692f2acba9a4</Anchor>
    <Abstract>Construct a new Audio Buffer object with a specified number of channels and frames.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>acdd9c86a3da3abf7f14b0b78b4ed73db</Anchor>
    <Abstract>Resizes all the underlying buffers to a new size.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>channelWriter</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a074119211f828ad0efe4d11ff9cf5774</Anchor>
    <Abstract>Return an iterator to a specific channel with a non-const type.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>channelWriterEnd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>ab5303f191b0145e3debceeaa1f51e554</Anchor>
    <Abstract>Returns a sentinel for the channelWriter(channelIndex) iterator.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>channelReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a7bb8e2ed6d5c816b1ec2a4b281a86ccf</Anchor>
    <Abstract>Returns a const iterator for a specific channel.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>channelReaderEnd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>ae8979ec36dd1cfa03d05f6f99034393b</Anchor>
    <Abstract>Returns a sentinel for the channelReader(channelIndex) iterator.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>ac794c2735763616947c7cdb87c00f29d</Anchor>
    <Abstract>Get a Span for a specific channel.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getConstSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a5983fd1053a613788a4f6c651b723ab7</Anchor>
    <Abstract>Get a const Span object for a specific channel.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a2a176b89f64851bdc7134ddd02b5c115</Anchor>
    <Abstract>Add a channel to the buffer with the current number of frames.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumFrames</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a93ec759a3f7d76a1c1c60f35a5cbd315</Anchor>
    <Abstract>Get the number of elements in each buffer.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a1461ee8bcedfa492f6d455b89e3160c6</Anchor>
    <Abstract>Get the number of channels.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>empty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a39e8d91018c396244e71f79e99b1fa5f</Anchor>
    <Abstract>Check if the buffers contains no elements.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSample</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>afa6f70f8f67400687d9996ffcc458aee</Anchor>
    <Abstract>Get a reference to a given element in a given buffer.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a69740b05fc6cf9ca68a202b2b6ff36a6</Anchor>
    <Abstract>Alias for getSample(...)</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a4a193ca9915de973ebc7f3712c4c6ac9</Anchor>
    <Abstract>Remove all channels from the buffer and reset it to empty.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a1b4e5fc79b8b1328cdcf5a23ef802dce</Anchor>
    <Abstract>Add a positive number of channels to the buffer.</Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::AudioSpan</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Abstract>Extension of the concept of spans to multiple channels.</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a13a869dfe27a428cafde1c0c91a0046d</Anchor>
    <Abstract>Construct a new Audio Span object.</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a47106ace0b200dfcade80a58924690cb</Anchor>
    <Abstract>Construct a new Audio Span object from initializer lists.</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a85579614ec6d52e961ad31a932cf04bc</Anchor>
    <Abstract>Construct a new Audio Span object from a list of absl::Span&lt;Type&gt;</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a91eb3a657291d7953466dde11ed9c1cc</Anchor>
    <Abstract>Get a raw pointer to a specific channel from the AudioSpan.</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator const float *const *</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>aff3fba956d38d54d3181131805e5aa87</Anchor>
    <Abstract>Convert implicitly to a pointer of channels.</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator float *const *</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>ad1c020401877e76779bd8452827b3830</Anchor>
    <Abstract>Convert implicitly to a pointer of channels.</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a3e52171cc3bc33246880a16010c750d7</Anchor>
    <Abstract>Get a Span&lt;Type&gt; corresponding to a specific channel.</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getConstSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>aec8a5fbc1e563ae78964b3bc139c1d3a</Anchor>
    <Abstract>Get a Span&lt;const Type&gt; corresponding to a specific channel.</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>meanSquared</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>aeb816775078a2ed606ca8c05c0ad6863</Anchor>
    <Abstract>Get the mean of the squared values of the AudioSpan elements on all channels.</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>afe7915ff9acf885df62788d57709b933</Anchor>
    <Abstract>Fills all the elements of the AudioSpan with the same value.</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a932b9a49a13aa7fc0a818ee70bec5bc9</Anchor>
    <Abstract>Apply a gain span elementwise to all channels in the AudioSpan.</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a9be0f4143ad160c2b228999ad6dd9d29</Anchor>
    <Abstract>Apply a gain to all channels in the AudioSpan.</Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spans</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>ad8abff0f05730a73af659f5b4a5a20cc</Anchor>
    <Abstract>Construct a new Audio Span object from an AudioBuffer with a const Type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Buffer</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Abstract>A heap buffer structure that tries to align its beginning and adds a small offset at the end for alig...</Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Buffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a2760746470b636632cd6090cfe008884</Anchor>
    <Abstract>Construct a new Buffer object that is empty.</Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Buffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a358a82cfc237822ffc4800adedc92635</Anchor>
    <Abstract>Construct a new Buffer object with size.</Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a39cf7ea601dc9d488d5f948f22f7c8a6</Anchor>
    <Abstract>Resizes the buffer.</Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a3fe4689394573298ac4471df3a82cff7</Anchor>
    <Abstract>Clear the buffers and frees the underlying memory.</Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Buffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a9b85f8a8b1be4471fd52ecb71b3fe20d</Anchor>
    <Abstract>Construct a new Buffer object from an existing one.</Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Buffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a403769cc8059d61478ad9bfd332b25b4</Anchor>
    <Abstract>Construct a new Buffer object by moving an existing one.</Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>counter</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a2c6dd38a79c8897a3d781d13f5ff46bd</Anchor>
    <Abstract>Return the buffer counter object.</Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::BufferCounter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::BufferCounter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer_counter.html</Path>
    <Abstract>A buffer counting class that tries to track the memory usage.</Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::CCMap</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Abstract>A simple map that holds ValueType elements at different indices, and can return a default one if not ...</Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CCMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Anchor>a02a7160337593535d36ce12e0f338e45</Anchor>
    <Abstract>Construct a new CCMap object with the specified default value.</Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getWithDefault</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Anchor>a5fd9ade3276c6b444f22644365744c38</Anchor>
    <Abstract>Returns the held object at the index, or a default value if not present.</Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Anchor>ae9bc69ef37194b4f36b8556710648d1c</Anchor>
    <Abstract>Get the value at index or emplace a new one if not present.</Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>empty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Anchor>a5f812431eaa247cd012a54801c19d969</Anchor>
    <Abstract>Is the container empty.</Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Anchor>abcd2e6d710bb1bcf467562a956188b37</Anchor>
    <Abstract>Returns true if the container containers an element at index.</Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Curve</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Curve</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_curve.html</Path>
    <Abstract>A value-mapping controller curve, built-in or user-defined.</Abstract>
    <DeclaredIn>Curve.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>evalCC7</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Curve</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_curve.html</Path>
    <Anchor>a48db4499edd5fdc569788aaf768348e1</Anchor>
    <Abstract>Compute the curve for integral x in domain [0:127].</Abstract>
    <DeclaredIn>Curve.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>evalCC7</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Curve</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_curve.html</Path>
    <Anchor>a91cbda0799543c72675e3cb230f4a8f3</Anchor>
    <Abstract>Compute the curve for real x in domain [0:127].</Abstract>
    <DeclaredIn>Curve.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>evalNormalized</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Curve</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_curve.html</Path>
    <Anchor>a4302d3137546e879fa797ee8f63c0c0c</Anchor>
    <Abstract>Compute the curve for real x in domain [0:1].</Abstract>
    <DeclaredIn>Curve.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>buildCurveFromHeader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::Curve</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_curve.html</Path>
    <Anchor>a2283e4db08a195e689ec58c0e91db12e</Anchor>
    <Abstract>Build a curve based on contents of a &lt;curve&gt; header.</Abstract>
    <DeclaredIn>Curve.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>buildPredefinedCurve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::Curve</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_curve.html</Path>
    <Anchor>a43c7998c15a961662349750b0b6537a5</Anchor>
    <Abstract>Build a predefined curve.</Abstract>
    <DeclaredIn>Curve.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>buildBipolar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::Curve</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_curve.html</Path>
    <Anchor>a29ebf57262fc9ee7f4fe2b5342093807</Anchor>
    <Abstract>Build a linear curve from v1 to v2.</Abstract>
    <DeclaredIn>Curve.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDefault</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::Curve</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_curve.html</Path>
    <Anchor>a30f3cdbf8e7a5336c5f147cb044df355</Anchor>
    <Abstract>Get a linear curve from 0 to 1.</Abstract>
    <DeclaredIn>Curve.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::CurveSet</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::CurveSet</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_curve_set.html</Path>
    <Abstract>A collection of curves organized by index.</Abstract>
    <DeclaredIn>Curve.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addCurveFromHeader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CurveSet</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_curve_set.html</Path>
    <Anchor>a3752c3deb8a3b7a62bb67ac3a0f5281c</Anchor>
    <Abstract>Add a curve based on contents of a &lt;curve&gt; header.</Abstract>
    <DeclaredIn>Curve.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCurve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CurveSet</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_curve_set.html</Path>
    <Anchor>a720d4e58b8a28b150a393159f32e2a62</Anchor>
    <Abstract>Get a curve given its index.</Abstract>
    <DeclaredIn>Curve.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumCurves</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CurveSet</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_curve_set.html</Path>
    <Anchor>a9ebb23f648f8b5e248ddb27b98e883e2</Anchor>
    <Abstract>Get the number of slots.</Abstract>
    <DeclaredIn>Curve.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Effect</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Effect</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect.html</Path>
    <Abstract>Abstract base of SFZ effects.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Effect</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect.html</Path>
    <Anchor>ae14a86aaa36e4ec91969d0c06da09d57</Anchor>
    <Abstract>Initializes with the given sample rate.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Effect</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect.html</Path>
    <Anchor>a55295d34ac8682dfe97dcf5676974b60</Anchor>
    <Abstract>Sets the maximum number of frames to render at a time.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Effect</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect.html</Path>
    <Anchor>a9829422cc6f3d0cece184b9ebe1a10f8</Anchor>
    <Abstract>Reset the state to initial.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Effect</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect.html</Path>
    <Anchor>a2f075e78f901a7c9625859401ab85cd8</Anchor>
    <Abstract>Computes a cycle of the effect in stereo.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::EffectBus</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Abstract>Sequence of effects processed in series.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addEffect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>a3573ad4134d403a509a18fc653e87a40</Anchor>
    <Abstract>Adds an effect at the end of the bus.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNonZeroOutput</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>ae8a97eb57e5cc93a076c01791d188210</Anchor>
    <Abstract>Checks whether this bus can produce output.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setGainToMain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>a02a610d223b3913d8714748158889013</Anchor>
    <Abstract>Sets the amount of effect output going to the main.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setGainToMix</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>a290b5dfbcff9f1ae1311def3010f233f</Anchor>
    <Abstract>Sets the amount of effect output going to the mix.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>gainToMain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>a7f479ebbba968a08cdb931483fcd03ae</Anchor>
    <Abstract>Returns the gain for the main out.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>gainToMix</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>a09bf8f91a55d69f6a17c6b4c3acb3d1c</Anchor>
    <Abstract>Returns the gain for the mix out.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clearInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>a9d02bdbf5e02ed421a6dedb0affe2b70</Anchor>
    <Abstract>Resets the input buffers to zero.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addToInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>a4dee5931308f8ed29337fe555730bf62</Anchor>
    <Abstract>Adds some audio into the input buffer.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>a409bd9c4957de6d8868f582b7561c408</Anchor>
    <Abstract>Initializes all effects in the bus with the given sample rate.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>a78d78d23f84c750f79d34e42f3140f89</Anchor>
    <Abstract>Resets the state of all effects in the bus.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>adaa3d098558d0c4b7d5f1a291f793640</Anchor>
    <Abstract>Computes a cycle of the effect bus.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mixOutputsTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>ac4d24accb23dcd06acb90c832071a1fc</Anchor>
    <Abstract>Mixes the outputs into a pair of stereo signals: Main and Mix.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>a141d34060f3e802de814e63584f77eaa</Anchor>
    <Abstract>Sets the maximum number of frames to render at a time.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>numEffects</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectBus</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_bus.html</Path>
    <Anchor>a1eba07972ee9eb85722f51ff658608fc</Anchor>
    <Abstract>Return the number of effects in the bus.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::EffectFactory</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::EffectFactory</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_factory.html</Path>
    <Abstract>SFZ effects factory.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerStandardEffectTypes</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectFactory</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_factory.html</Path>
    <Anchor>a3d1c75ad9b8a37aeb4f6d745ddbc8993</Anchor>
    <Abstract>Registers all available standard effects into the factory.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerEffectType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectFactory</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_factory.html</Path>
    <Anchor>a27ab5e82749742619b086dab4f9313e2</Anchor>
    <Abstract>Registers a user-defined effect into the factory.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeEffect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EffectFactory</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_effect_factory.html</Path>
    <Anchor>a46fcdcff78030c2790aab61e7dd06870</Anchor>
    <Abstract>Instantiates an effect given the contents of the &lt;effect&gt; block.</Abstract>
    <DeclaredIn>Effects.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::FilePool</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Abstract>This is a singleton-designed class that holds all the preloaded data as well as functions to request ...</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilePool</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a1efdaef6de822f72ba822ebfebb4a17a</Anchor>
    <Abstract>Construct a new File Pool object.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setRootDirectory</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a8af2ebf9ec28ebccf2e119a4b38eead7</Anchor>
    <Abstract>Set the root directory from which to search for files to load.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumPreloadedSamples</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a2fe514d5486bbdcfb5f30fd2d02694b4</Anchor>
    <Abstract>Get the number of preloaded sample files.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFileInformation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>aa874478a8b3074ca0cc7b126e9ee952b</Anchor>
    <Abstract>Get metadata information about a file.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>preloadFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a3430758f4b1ab97c27620de5fc727155</Anchor>
    <Abstract>Preload a file with the proper offset bounds.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loadFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a5a312852402696519e1319f32a541839</Anchor>
    <Abstract>Load a file and return its information.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>checkSample</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a246c4468a5f60ce4ad34898c6474d9aa</Anchor>
    <Abstract>Check that the sample exists.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a1e9b651ad7b87601df6470cc6ecd9432</Anchor>
    <Abstract>Clear all preloaded files.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cleanupPromises</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a73f46234da3ccee6c40f4ddb354cfb01</Anchor>
    <Abstract>Moves the filled promises to a linear storage, and checks said linear storage for promises that are n...</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFilePromise</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>afe1de498a6d099da3541ea488ef8f8c3</Anchor>
    <Abstract>Get a file promise.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreloadSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a11cef5fe1e26c129c3e6b3c19c3e6667</Anchor>
    <Abstract>Change the preloading size.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreloadSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a6900a9a2ec2c78e75105ee801f54fb0c</Anchor>
    <Abstract>Get the current preload size.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setOversamplingFactor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a5e30479bbe1cdeffb0edbe178a8160ba</Anchor>
    <Abstract>Set the oversampling factor.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOversamplingFactor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>ad68325ef56ebe42a5281cfa0693a643c</Anchor>
    <Abstract>Get the current oversampling factor.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>emptyFileLoadingQueues</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a51e27530894aadd71f8ddd1e9c4cda65</Anchor>
    <Abstract>Empty the file loading queues without actually loading the files.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>waitForBackgroundLoading</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>adfc4e696a615594e4b7e965d3e2c57f6</Anchor>
    <Abstract>Wait for the background loading to finish for all promises in the queue.</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::FileReader</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::FileReader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_reader.html</Path>
    <Abstract>File-based version of Reader.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>location</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a5029527de5578f8b144356059e4c8d33</Anchor>
    <Abstract>Get the current source location.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a8083225b6caf5e21928491e76355e949</Anchor>
    <Abstract>Extract the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>peekChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>ae482cb42632b177ea77a6a4bb0ec7d63</Anchor>
    <Abstract>Get the next character without extracting it.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>putBackChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>ac9258dd2f17901c003965d9829f61019</Anchor>
    <Abstract>Put a previously extracted character back into the reader.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>putBackChars</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a93d3ab80a3e72f9822671e722dd74976</Anchor>
    <Abstract>Put some previously extracted characters back into the reader.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>extractWhile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>ae66b556ea3904d37feedfade922af75b</Anchor>
    <Abstract>Extract as long as a predicate holds on the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>extractUntil</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a25dcf985485d6b8e0b0778b0fc570903</Anchor>
    <Abstract>Extract until as a predicate does not hold on the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>extractExactChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a5ead2a48d3821246b7e1486fa186fe08</Anchor>
    <Abstract>Extract a character if it is equal to the expected value.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>skipChars</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a1904ff98645cb6b83f9f6f7c35ac036c</Anchor>
    <Abstract>Skip characters which belong to a given set.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>skipWhile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a66420aef70180c7fd6c5752b5f05a6c4</Anchor>
    <Abstract>Skip as long as a predicate holds on the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>skipUntil</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a5580542b5071a5fc36ff94f8cc16491c</Anchor>
    <Abstract>Skip until as a predicate does not hold on the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a7fd5f8755add5515bd6a336fabddbe96</Anchor>
    <Abstract>Check if the reader has no more characters.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasOneOfChars</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a969772d597e80a51947c64ca18d6b977</Anchor>
    <Abstract>Check if the reader has one of the following characters next.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>aa6a017e975c2127b14dba6fab06efea5</Anchor>
    <Abstract>Value of the end-of-file marker.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Filter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter.html</Path>
    <Abstract>Multi-mode filter for SFZ v2 Available for mono and stereo.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>init</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter.html</Path>
    <Anchor>a216c4d411fe2fccd0805eabd93bca820</Anchor>
    <Abstract>Set up the filter constants.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter.html</Path>
    <Anchor>a03066db973f2966108e09948b7bd18ff</Anchor>
    <Abstract>Reinitialize the filter memory to zeros.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>prepare</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter.html</Path>
    <Anchor>a6b1e41c7f1c96a655842e84cc7506e3c</Anchor>
    <Abstract>Clear the filter memory, and compute the initial coefficients unaffected by any smoothing.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter.html</Path>
    <Anchor>a0452fa77f2755d895b71af7ef4f162e6</Anchor>
    <Abstract>Process one cycle of the filter without modulating cutoff or Q.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>processModulated</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter.html</Path>
    <Anchor>a0495abb6f0f97d16bbc6c380b0b7d9bd</Anchor>
    <Abstract>Process one cycle of the filter with cutoff and Q values varying over time.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>channels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter.html</Path>
    <Anchor>afe482284ac17bf751466a27362b25a3e</Anchor>
    <Abstract>Get the number of channels.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter.html</Path>
    <Anchor>a87347a9741b6a31f983e1218e9324a02</Anchor>
    <Abstract>Set the number of channels.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter.html</Path>
    <Anchor>ad89e911fe1a770efcb246097c9c20a93</Anchor>
    <Abstract>Get the type of filter.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter.html</Path>
    <Anchor>af0dea416df3a9db569e6ff9cbaa55807</Anchor>
    <Abstract>Set the type of filter.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>typeFromName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter.html</Path>
    <Anchor>a7b8bebf97f99951f766c1c447780783f</Anchor>
    <Abstract>Get the filter type associated with the given name.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::FilterEq</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::FilterEq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter_eq.html</Path>
    <Abstract>Equalizer filter for SFZ v1 Available for mono and stereo.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>init</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilterEq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter_eq.html</Path>
    <Anchor>ae1f95b670a2b860386a501e1cda33160</Anchor>
    <Abstract>Set up the filter constants.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilterEq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter_eq.html</Path>
    <Anchor>aac4a0edd1f076696d56e011d0d4f3739</Anchor>
    <Abstract>Reinitialize the filter memory to zeros.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>prepare</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilterEq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter_eq.html</Path>
    <Anchor>ae2b8dbb9faabc85d0fe2bba89d5ee57c</Anchor>
    <Abstract>Clear the filter memory, and compute the initial coefficients unaffected by any smoothing.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilterEq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter_eq.html</Path>
    <Anchor>a21f94c3d809505486fee71d86dfd7b1e</Anchor>
    <Abstract>Process one cycle of the filter without modulating cutoff or bandwidth.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>processModulated</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilterEq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter_eq.html</Path>
    <Anchor>a12d26a0e2c8f0c6eb0eb641489725ac7</Anchor>
    <Abstract>Process one cycle of the filter with cutoff and bandwidth values varying over time.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>channels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilterEq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter_eq.html</Path>
    <Anchor>a48341400ddf69e1020bfd57b7dac67a2</Anchor>
    <Abstract>Get the number of channels.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilterEq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter_eq.html</Path>
    <Anchor>a6347773e9b24da4d5886d2cbb3b4a9c8</Anchor>
    <Abstract>Set the number of channels.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilterEq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter_eq.html</Path>
    <Anchor>a0ee219a4a1cb330841030bbf4137e55a</Anchor>
    <Abstract>Get the type of filter.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilterEq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter_eq.html</Path>
    <Anchor>a6f7814a4422fc210d0ccb76a4630daf7</Anchor>
    <Abstract>Set the type of filter.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>typeFromName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::FilterEq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_filter_eq.html</Path>
    <Anchor>a3bd02410593550c6d628a338c8ff2a4e</Anchor>
    <Abstract>Get the filter type associated with the given name.</Abstract>
    <DeclaredIn>SfzFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::HarmonicProfile</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::HarmonicProfile</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_harmonic_profile.html</Path>
    <Abstract>A description of the harmonics of a particular wave form.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getHarmonic</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::HarmonicProfile</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_harmonic_profile.html</Path>
    <Anchor>abf320c71b93a715323ea24be7584a805</Anchor>
    <Abstract>Get the value at the given index of the frequency spectrum.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>generate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::HarmonicProfile</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_harmonic_profile.html</Path>
    <Anchor>ae23c3fc6c1b662e85f7e94784791f500</Anchor>
    <Abstract>Generate a period of the waveform and store it in the table.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::HistoricalBuffer</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::HistoricalBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_historical_buffer.html</Path>
    <Abstract>A naive circular buffer which is supposed to hold power values and return the average of its content.</Abstract>
    <DeclaredIn>HistoricalBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::HistoricalBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_historical_buffer.html</Path>
    <Anchor>aa4fa629241e3ba596b5cc2dfc3b8f668</Anchor>
    <Abstract>Resize the underlying buffer.</Abstract>
    <DeclaredIn>HistoricalBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>push</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::HistoricalBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_historical_buffer.html</Path>
    <Anchor>ac2d93a98435fa5be487bb299990ab26b</Anchor>
    <Abstract>Add a value to the buffer.</Abstract>
    <DeclaredIn>HistoricalBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getAverage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::HistoricalBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_historical_buffer.html</Path>
    <Anchor>a9fd4b03e228ffb6978813c6f9f9cf4bc</Anchor>
    <Abstract>Return the average of all the values in the buffer.</Abstract>
    <DeclaredIn>HistoricalBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::MidiState</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Abstract>Holds the current &quot;MIDI state&quot;, meaning the known state of all CCs currently, as well as the note vel...</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>noteOnEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>af64921c1c98bb9c6876d907451102f67</Anchor>
    <Abstract>Update the state after a note on event.</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>noteOffEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>ad841322da1aa627683c3a50e45a07708</Anchor>
    <Abstract>Update the state after a note off event.</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNoteDuration</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>ab1891b6bd5fed9725f46f4acf0ca9565</Anchor>
    <Abstract>Get the note duration since note on.</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a691eb8e108cbba4b66e0394a9695e78c</Anchor>
    <Abstract>Set the maximum size of the blocks for the callback.</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>aec494440cf90f62a616b8daba9b6680c</Anchor>
    <Abstract>Set the sample rate.</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNoteVelocity</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a650f53c6394fa2c2af7c1fa31985ab58</Anchor>
    <Abstract>Get the note on velocity for a given note.</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pitchBendEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>ad1fbf62e23e48b7dd3c4b8d6321e3b79</Anchor>
    <Abstract>Register a pitch bend event.</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPitchBend</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a39a6e00fbe18bdfb4dd91f34e74992b5</Anchor>
    <Abstract>Get the pitch bend status.</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ccEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a38708818db0ec246b13510b532eb04c2</Anchor>
    <Abstract>Register a CC event.</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>advanceTime</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a7d9a887fecfb1337bdd6ce5f0c1b9fc2</Anchor>
    <Abstract>Advances the internal clock of a given amount of samples.</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCCValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a5d48e4c28eb5787861972b077d4920a2</Anchor>
    <Abstract>Get the CC value for CC number.</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a8e4beb553db5ad28eaae35032cfd1967</Anchor>
    <Abstract>Reset the midi state (does not impact the last note on time)</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resetAllControllers</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a6ee1d100b16b89a372054a515fae11fb</Anchor>
    <Abstract>Reset all the controllers.</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::OnePoleFilter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::OnePoleFilter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_one_pole_filter.html</Path>
    <Abstract>An implementation of a one pole filter.</Abstract>
    <DeclaredIn>OnePoleFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Opcode</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Opcode</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_opcode.html</Path>
    <Abstract>Opcode description class.</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Oversampler</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Oversampler</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_oversampler.html</Path>
    <Abstract>Wraps the internal oversampler in a single function that takes an AudioBuffer and oversamples it in a...</Abstract>
    <DeclaredIn>Oversampler.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Oversampler</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Oversampler</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_oversampler.html</Path>
    <Anchor>a0796ed6eba24d67aab37602a7233e18a</Anchor>
    <Abstract>Construct a new Oversampler object.</Abstract>
    <DeclaredIn>Oversampler.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stream</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Oversampler</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_oversampler.html</Path>
    <Anchor>ab26a5d0907eebc75372220cc7a0376e2</Anchor>
    <Abstract>Stream the oversampling of an input AudioBuffer into an output one, possibly signaling the caller alo...</Abstract>
    <DeclaredIn>Oversampler.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Parser</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Parser</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_parser.html</Path>
    <Abstract>Context-dependent parser for SFZ files.</Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Range</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::Range</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_range.html</Path>
    <Abstract>This class holds a range with functions to clamp and test if a value is in the range.</Abstract>
    <DeclaredIn>Range.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPair</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Range</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_range.html</Path>
    <Anchor>ad63f967de9993809e8150222006312a4</Anchor>
    <Abstract>Get the range as an std::pair of the endpoints.</Abstract>
    <DeclaredIn>Range.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Range</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_range.html</Path>
    <Anchor>aef58ceb857807af2c9d2984d240d0aec</Anchor>
    <Abstract>Clamp a value within the range including the endpoints.</Abstract>
    <DeclaredIn>Range.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>containsWithEnd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Range</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_range.html</Path>
    <Anchor>a226914eac9fd1925d1f8271b49e51e82</Anchor>
    <Abstract>Checks if a value is in the range, including the endpoints.</Abstract>
    <DeclaredIn>Range.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Range</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_range.html</Path>
    <Anchor>af7c6a20406d1471b6ad1b14df5bbf6b9</Anchor>
    <Abstract>Checks if a value is in the range, excluding the end of the range.</Abstract>
    <DeclaredIn>Range.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shrinkIfSmaller</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Range</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_range.html</Path>
    <Anchor>aa087a74ec0e059cf61ee23ee5f29e58c</Anchor>
    <Abstract>Shrink the region if it is smaller than the provided start and end points.</Abstract>
    <DeclaredIn>Range.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Reader</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Abstract>Utility to extract characters and strings from a source of any kind.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>location</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a5029527de5578f8b144356059e4c8d33</Anchor>
    <Abstract>Get the current source location.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a8083225b6caf5e21928491e76355e949</Anchor>
    <Abstract>Extract the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>peekChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>ae482cb42632b177ea77a6a4bb0ec7d63</Anchor>
    <Abstract>Get the next character without extracting it.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>putBackChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>ac9258dd2f17901c003965d9829f61019</Anchor>
    <Abstract>Put a previously extracted character back into the reader.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>putBackChars</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a93d3ab80a3e72f9822671e722dd74976</Anchor>
    <Abstract>Put some previously extracted characters back into the reader.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>extractWhile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>ae66b556ea3904d37feedfade922af75b</Anchor>
    <Abstract>Extract as long as a predicate holds on the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>extractUntil</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a25dcf985485d6b8e0b0778b0fc570903</Anchor>
    <Abstract>Extract until as a predicate does not hold on the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>extractExactChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a5ead2a48d3821246b7e1486fa186fe08</Anchor>
    <Abstract>Extract a character if it is equal to the expected value.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>skipChars</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a1904ff98645cb6b83f9f6f7c35ac036c</Anchor>
    <Abstract>Skip characters which belong to a given set.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>skipWhile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a66420aef70180c7fd6c5752b5f05a6c4</Anchor>
    <Abstract>Skip as long as a predicate holds on the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>skipUntil</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a5580542b5071a5fc36ff94f8cc16491c</Anchor>
    <Abstract>Skip until as a predicate does not hold on the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a7fd5f8755add5515bd6a336fabddbe96</Anchor>
    <Abstract>Check if the reader has no more characters.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasOneOfChars</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a969772d597e80a51947c64ca18d6b977</Anchor>
    <Abstract>Check if the reader has one of the following characters next.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>aa6a017e975c2127b14dba6fab06efea5</Anchor>
    <Abstract>Value of the end-of-file marker.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Region</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Abstract>Regions are the basic building blocks for the SFZ parsing and handling code.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isRelease</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a7c2e846ea9b2c9d3249be1866229d838</Anchor>
    <Abstract>Triggers on release?</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGenerator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a8c59582c10085c1a9afb4c590955b9e6</Anchor>
    <Abstract>Is a generator (*sine or *silence mostly)?</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shouldLoop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>af42ac52319e1f55a00585727a7678290</Anchor>
    <Abstract>Is a looping region (at least potentially)?</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isSwitchedOn</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a387b44757f39315d1cf2fb87219b7bf4</Anchor>
    <Abstract>Given the current midi state, is the region switched on?</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerNoteOn</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a7e7d59e43f7f7363b3a461d68569daed</Anchor>
    <Abstract>Register a new note on event.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerNoteOff</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>aaa9f59b66f211de204bf637fee7cfe99</Anchor>
    <Abstract>Register a new note off event.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerCC</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a55391638619de2aaa9df69c29be546c7</Anchor>
    <Abstract>Register a new CC event.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerPitchWheel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a5d6fa88f5df00ff0298d9d0e030d6019</Anchor>
    <Abstract>Register a new pitch wheel event.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerAftertouch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a4a0aa074ba715db28fb9870565ad8aa1</Anchor>
    <Abstract>Register a new aftertouch event.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerTempo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>aad83bce0d4835e33725cc12eb21dcd8b</Anchor>
    <Abstract>Register tempo.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBasePitchVariation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a6d7ad31eadf82a5953d776e28f5904bf</Anchor>
    <Abstract>Get the base pitch of the region depending on which note has been pressed and at which velocity.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNoteGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>ad608f64ff1d5c48b9c2437ca34297ce6</Anchor>
    <Abstract>Get the note-related gain of the region depending on which note has been pressed and at which velocit...</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCrossfadeGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>ad2e0dd57d5fcd8e5be257e54583596be</Anchor>
    <Abstract>Get the additional crossfade gain of the region depending on the CC values.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBaseVolumedB</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>af154061123e597fafe79c8110f953547</Anchor>
    <Abstract>Get the base volume of the region depending on which note has been pressed to trigger the region.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBaseGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>ac979f52d1b805993236acc7a09227f77</Anchor>
    <Abstract>Get the base gain of the region.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPhase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>ac0bf9baa71744ab10e4526cca6aee8fb</Anchor>
    <Abstract>Get the base gain of the region.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>velocityCurve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a6f5b8124f5bd574c8b7d59f5be18eed2</Anchor>
    <Abstract>Computes the gain value related to the velocity of the note.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOffset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a77a02aebe38668bf5cbcbe21921cc844</Anchor>
    <Abstract>Get the region offset in samples.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDelay</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>af3046d66fa5acc29cce66e99ecb955ea</Anchor>
    <Abstract>Get the region delay in seconds.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trueSampleEnd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>ae5e6b274bfa31514601b8fcb851bc199</Anchor>
    <Abstract>Get the index of the sample end, either natural end or forced loop.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>ac7770f6af8c8879876199808e9a9757e</Anchor>
    <Abstract>Parse a new opcode into the region to fill in the proper parameters.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getGainToEffectBus</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a4ae87174b2abe3ba2fe722688c9c6ebf</Anchor>
    <Abstract>Get the gain this region contributes into the input of the Nth effect bus.</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::ScopedTiming</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::ScopedTiming</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_scoped_timing.html</Path>
    <Abstract>Creates an RAII logger which fills or adds to a duration on destruction.</Abstract>
    <DeclaredIn>Logger.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScopedTiming</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::ScopedTiming</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_scoped_timing.html</Path>
    <Anchor>a2e47da2a683151c5bdfd119dc904e6bd</Anchor>
    <Abstract>Construct a new Scoped Logger object.</Abstract>
    <DeclaredIn>Logger.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::SourceLocation</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::SourceLocation</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_source_location.html</Path>
    <Abstract>Source file location for errors and warnings.</Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::SourceRange</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::SourceRange</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_source_range.html</Path>
    <Abstract>Range of source file.</Abstract>
    <DeclaredIn>Parser.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::StringViewReader</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::StringViewReader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_string_view_reader.html</Path>
    <Abstract>String-view-based version of Reader.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>location</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a5029527de5578f8b144356059e4c8d33</Anchor>
    <Abstract>Get the current source location.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a8083225b6caf5e21928491e76355e949</Anchor>
    <Abstract>Extract the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>peekChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>ae482cb42632b177ea77a6a4bb0ec7d63</Anchor>
    <Abstract>Get the next character without extracting it.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>putBackChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>ac9258dd2f17901c003965d9829f61019</Anchor>
    <Abstract>Put a previously extracted character back into the reader.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>putBackChars</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a93d3ab80a3e72f9822671e722dd74976</Anchor>
    <Abstract>Put some previously extracted characters back into the reader.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>extractWhile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>ae66b556ea3904d37feedfade922af75b</Anchor>
    <Abstract>Extract as long as a predicate holds on the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>extractUntil</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a25dcf985485d6b8e0b0778b0fc570903</Anchor>
    <Abstract>Extract until as a predicate does not hold on the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>extractExactChar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a5ead2a48d3821246b7e1486fa186fe08</Anchor>
    <Abstract>Extract a character if it is equal to the expected value.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>skipChars</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a1904ff98645cb6b83f9f6f7c35ac036c</Anchor>
    <Abstract>Skip characters which belong to a given set.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>skipWhile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a66420aef70180c7fd6c5752b5f05a6c4</Anchor>
    <Abstract>Skip as long as a predicate holds on the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>skipUntil</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a5580542b5071a5fc36ff94f8cc16491c</Anchor>
    <Abstract>Skip until as a predicate does not hold on the next character.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a7fd5f8755add5515bd6a336fabddbe96</Anchor>
    <Abstract>Check if the reader has no more characters.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasOneOfChars</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>a969772d597e80a51947c64ca18d6b977</Anchor>
    <Abstract>Check if the reader has one of the following characters next.</Abstract>
    <DeclaredIn>ParserPrivate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>sfz::Reader</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_reader.html</Path>
    <Anchor>aa6a017e975c2127b14dba6fab06efea5</Anchor>
    <Abstract>Value of the end-of-file marker.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Synth</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Abstract>This class is the core of the sfizz library.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Synth</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>acb60deb7fdad7c8b8c1e8940048a1d88</Anchor>
    <Abstract>Construct a new Synth object with no voices.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Synth</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>aeaea30aa32e831a549a62bd4aec5785a</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Synth</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>add1e3279e1695846f8c3400dd72a7ef8</Anchor>
    <Abstract>Construct a new Synth object with a specified number of voices.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loadSfzFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a3286005aba4e15e97400c36f15ef2318</Anchor>
    <Abstract>Empties the current regions and load a new SFZ file into the synth.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumRegions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ac49878f212ad1db7faffc1198867e1eb</Anchor>
    <Abstract>Get the current number of regions loaded.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumGroups</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a107adb64137047930d275b7fbd82e01b</Anchor>
    <Abstract>Get the current number of groups loaded.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumMasters</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a2852ea64f3e471fe5097e3cdc28eb577</Anchor>
    <Abstract>Get the current number of masters loaded.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumCurves</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a5fe3871a9dc4d1e9f089a64de1da8aac</Anchor>
    <Abstract>Get the current number of curves loaded.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exportMidnam</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a53c5c0eb96484317cde70222221a797e</Anchor>
    <Abstract>Export a MIDI Name document describing the loaded instrument.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRegionView</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a7f412e08363d9c51522f04c2b587728a</Anchor>
    <Abstract>Get a raw view into a specific region.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getVoiceView</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ab0bd46a930df0e8fe7106a745db55872</Anchor>
    <Abstract>Get a raw view into a specific voice.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getEffectBusView</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a1abe2f0ebe7695eba6163a4a36afbed9</Anchor>
    <Abstract>Get a raw view into a specific voice.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getUnknownOpcodes</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a681f9419e9007f6414f0207a8465bce4</Anchor>
    <Abstract>Get a list of unknown opcodes.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumPreloadedSamples</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a8bbbd2db16396a529dff87b36b6e3c5c</Anchor>
    <Abstract>Get the number of preloaded samples in the synth.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>acb7f5d0059c82d5354cb5c8e9e7b02a2</Anchor>
    <Abstract>Set the maximum size of the blocks for the callback.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>aaa9ee5acbc1c406472e41194f0088dc0</Anchor>
    <Abstract>Set the sample rate.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getVolume</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a5c693f7a10813afd3a9c06cefee6f99a</Anchor>
    <Abstract>Get the current value for the volume, in dB.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setVolume</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>adcc74a8304e6a13fde764c9928d2e385</Anchor>
    <Abstract>Set the value for the volume.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>noteOn</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>acb204cbc70f439d8fe5260f4b910157b</Anchor>
    <Abstract>Send a note on event to the synth.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>noteOff</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a522c431f0ff565a69ab88925b7b89af3</Anchor>
    <Abstract>Send a note off event to the synth.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>aadf74366bb17e532a64aed8bf12952c0</Anchor>
    <Abstract>Send a CC event to the synth.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pitchWheel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>af082ebe877007a2206134161abe9be7c</Anchor>
    <Abstract>Send a pitch bend event to the synth.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>aftertouch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ae9e07c2e7a68ff428003246bdc2d6b12</Anchor>
    <Abstract>Send a aftertouch event to the synth.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tempo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ab54482367777b572cc9e62b108ffea25</Anchor>
    <Abstract>Send a tempo event to the synth.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>renderBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ad2532b5e7690b15086a80283f3cf6486</Anchor>
    <Abstract>Render an block of audio data in the buffer.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumActiveVoices</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ad49426c688ee68d9d73e9b66bb2bac84</Anchor>
    <Abstract>Get the number of active voices.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumVoices</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a7c1f04b7be90195ddb46099a42731349</Anchor>
    <Abstract>Get the total number of voices in the synth (the polyphony)</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNumVoices</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a6b577d397db6f577b6602b1e4f55d91f</Anchor>
    <Abstract>Change the number of voices (the polyphony)</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>garbageCollect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a21ac9843f358524a9421f48afc202af0</Anchor>
    <Abstract>Trigger a garbage collection, which removes the samples that are loaded by the FilePool after being r...</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setOversamplingFactor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ac1fa08496724db42bf002fd68caacddb</Anchor>
    <Abstract>Set the oversampling factor to a new value.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOversamplingFactor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ae1581f2d663f7fa242bbda8282aaf8b1</Anchor>
    <Abstract>get the current oversampling factor</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreloadSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ac7268210d0e292b97b8e961fcc5f00d4</Anchor>
    <Abstract>Set the preloaded file size.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreloadSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ae9dc0ac9e3540ad64684f44aef6d578a</Anchor>
    <Abstract>get the current preloaded file size</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getAllocatedBuffers</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ab053c82caec16444daeaed6f27b44f95</Anchor>
    <Abstract>Gets the number of allocated buffers.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getAllocatedBytes</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ab03c02dcd32ff1856c85a875315370e8</Anchor>
    <Abstract>Gets the number of bytes allocated through the buffers.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>enableFreeWheeling</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ae48e025723a2313e9ea78e3cd69376bf</Anchor>
    <Abstract>Enable freewheeling on the synth.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>disableFreeWheeling</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a437a8b23e6597254279898c2707f611b</Anchor>
    <Abstract>Disable freewheeling on the synth.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shouldReloadFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a34f084abd0b159544ff741cdf8804caf</Anchor>
    <Abstract>Check if the SFZ should be reloaded.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>enableLogging</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a04c0a4aa6dca74251833aa37fcb99e00</Anchor>
    <Abstract>Enable logging of timings to sidecar CSV files.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setLoggingPrefix</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a6df653de01b2f3dfeec5d0e4e3ab66ae</Anchor>
    <Abstract>Enable logging of timings to sidecar CSV files.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>disableLogging</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a69beb5ba581410b94b10da8e46d55a8a</Anchor>
    <Abstract>Disable logging;.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>allSoundOff</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ae8bbdf0cb46324893db92fcd8ffe39db</Anchor>
    <Abstract>Shuts down the current processing, clear buffers and reset the voices.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getParser</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>aa93f1ece08d11cbdf35cd48792565712</Anchor>
    <Abstract>Get the parser.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getParser</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a83376baea722886838af1faa69506527</Anchor>
    <Abstract>Get the parser.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onParseFullBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a4ff867b7715f683543636f7031f80490</Anchor>
    <Abstract>The parser callback; this is called by the parent object each time a new region, group,...</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onParseError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a48207ea5beed1cd5b5571f27d042ce34</Anchor>
    <Abstract>The parser callback when an error occurs.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onParseWarning</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a1f333c1e285db99cd703434be7210e50</Anchor>
    <Abstract>The parser callback when a warning occurs.</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Voice</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Abstract>The SFZ voice are the polyphony holders.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Voice</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a102d2cb8855f7c4ab6421299f806d890</Anchor>
    <Abstract>Construct a new voice with the midistate singleton.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a926b7a7e7d1979e7ae20bf4869dee56e</Anchor>
    <Abstract>Change the sample rate of the voice.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a5d3be569e83f0011f9a49d0adebe8117</Anchor>
    <Abstract>Set the expected block size.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>af850a94b30882aa92c4ced438c2d593c</Anchor>
    <Abstract>Get the sample rate of the voice.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a5394dccc480fa35282b24d29ff3cd20b</Anchor>
    <Abstract>Get the expected block size.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>startVoice</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a7aecb2c459d848a32c83f53a7355c90a</Anchor>
    <Abstract>Start playing a region after a short delay for different triggers (note on, off, cc)</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerNoteOff</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a1ee2d50af7e630d1f3ed1519cde91660</Anchor>
    <Abstract>Register a note-off event; this may trigger a release.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerCC</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>ac1d05bb9218afb57a3d384cb6fe06bfd</Anchor>
    <Abstract>Register a CC event; this may trigger a release.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerPitchWheel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a8d53d82d8f3df7cdc138cefe809ce0ac</Anchor>
    <Abstract>Register a pitch wheel event; for now this does nothing.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerAftertouch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a4ec0d3bf26b312844dded96a9a2fe4d6</Anchor>
    <Abstract>Register an aftertouch event; for now this does nothing.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerTempo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a9505cfc20b1c8c994ba8b10e497555a3</Anchor>
    <Abstract>Register a tempo event; for now this does nothing.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>checkOffGroup</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a0d12582ad73d0f3a61a2f7433e7b2d90</Anchor>
    <Abstract>Checks if the voice should be offed by another starting in the group specified.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>renderBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>acff7f23f39a29c9501ffee66ca90c9d5</Anchor>
    <Abstract>Render a block of data for this voice into the span.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isFree</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a85986785825cc15c0ec37fea3dfb4b96</Anchor>
    <Abstract>Is the voice free?</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canBeStolen</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a06150d71de68d82cb17c5901fdc583b8</Anchor>
    <Abstract>Can the voice be &quot;stolen&quot; and reused (i.e.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTriggerNumber</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a1c2ae3b23508f971a422ffe86d779f36</Anchor>
    <Abstract>Get the number that triggered the voice (note number or cc number)</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTriggerValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>adcb5d466b475bfaf31e8b3b1d7b55184</Anchor>
    <Abstract>Get the value that triggered the voice (note velocity or cc value)</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTriggerType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a3ecbfa53a4c4f8d1a3fcde2f6e2e818d</Anchor>
    <Abstract>Get the type of trigger.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a3c5fe85515b2edfa7228b75b134e5b89</Anchor>
    <Abstract>Reset the voice to its initial values.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMeanSquaredAverage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a22a85c50bde628e6add863bdcdc5ef59</Anchor>
    <Abstract>Get the mean squared power of the last rendered block.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSourcePosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a634100fd8b4799d1b620640c896a676a</Anchor>
    <Abstract>Get the position of the voice in the source, in samples.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRegion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a9d36436f417f8f52a34f51bd450d3af7</Anchor>
    <Abstract>Returns the region that is currently playing.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setMaxFiltersPerVoice</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a1c46989c59ca8b3f62b973b3138f01d1</Anchor>
    <Abstract>Set the max number of filters per voice.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setMaxEQsPerVoice</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a928423a1c6580400ec664179c02fa87d</Anchor>
    <Abstract>Set the max number of EQs per voice.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>release</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a4d11c58d6395975d42c1770493e4cb45</Anchor>
    <Abstract>Release the voice after a given delay.</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::WavetableMulti</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::WavetableMulti</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_wavetable_multi.html</Path>
    <Abstract>Multisample of a wavetable, which is a collection of FFT-filtered mipmaps adapted for various playbac...</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::WavetableOscillator</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::WavetableOscillator</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_wavetable_oscillator.html</Path>
    <Abstract>An oscillator based on wavetables.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>init</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::WavetableOscillator</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_wavetable_oscillator.html</Path>
    <Anchor>a20528dfc7edfd4c524d1a02a2a353fd9</Anchor>
    <Abstract>Initialize with the given sample rate.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::WavetableOscillator</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_wavetable_oscillator.html</Path>
    <Anchor>a128c887e7490b701732ad7ee2da061fd</Anchor>
    <Abstract>Reset the oscillation to the initial phase.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setWavetable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::WavetableOscillator</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_wavetable_oscillator.html</Path>
    <Anchor>a87888768088f412c01ccb914d2596834</Anchor>
    <Abstract>Set the wavetable to generate with this oscillator.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPhase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::WavetableOscillator</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_wavetable_oscillator.html</Path>
    <Anchor>a09362c0c116b3c333741706e377e85a3</Anchor>
    <Abstract>Set the current phase of this oscillator, between 0 and 1 excluded.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::WavetableOscillator</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_wavetable_oscillator.html</Path>
    <Anchor>a48186596eea5454be96b5db276aa5057</Anchor>
    <Abstract>Compute a cycle of the oscillator, with constant frequency.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>processModulated</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::WavetableOscillator</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_wavetable_oscillator.html</Path>
    <Anchor>ac32b39d16e456f4c8bee53d3d3589c0c</Anchor>
    <Abstract>Compute a cycle of the oscillator, with varying frequency.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::WavetablePool</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::WavetablePool</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_wavetable_pool.html</Path>
    <Abstract>Holds predefined and loaded wavetables.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFileWave</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::WavetablePool</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_wavetable_pool.html</Path>
    <Anchor>aa187f9c62d396619f5b3258cf2a3489b</Anchor>
    <Abstract>Get a file wave.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createFileWave</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::WavetablePool</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_wavetable_pool.html</Path>
    <Anchor>adeede1bb4f9f1a9657cbd42dfe609284</Anchor>
    <Abstract>Load a file wave from the filepool and use it to create a wavetable.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clearFileWaves</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::WavetablePool</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_wavetable_pool.html</Path>
    <Anchor>a62fd394aa1e1303d950e08e2b0306912</Anchor>
    <Abstract>Removes all the stored file waves from the wavetable pool.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::WavetableRange</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::WavetableRange</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_wavetable_range.html</Path>
    <Abstract>A helper to select ranges of a multi-sampled oscillator, according to the frequency of an oscillator.</Abstract>
    <DeclaredIn>Wavetables.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::fx::Apan</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::fx::Apan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_apan.html</Path>
    <Abstract>Effect which does nothing.</Abstract>
    <DeclaredIn>Apan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Apan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_apan.html</Path>
    <Anchor>ae61e787e22844a184abbecd0cb4c0e18</Anchor>
    <Abstract>Initializes with the given sample rate.</Abstract>
    <DeclaredIn>Apan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Apan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_apan.html</Path>
    <Anchor>a0fe0fb558fa79a2c5acc51f812d6d631</Anchor>
    <Abstract>Sets the maximum number of frames to render at a time.</Abstract>
    <DeclaredIn>Apan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Apan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_apan.html</Path>
    <Anchor>a576ccef6afb742d997038be22a20b173</Anchor>
    <Abstract>Reset the state to initial.</Abstract>
    <DeclaredIn>Apan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Apan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_apan.html</Path>
    <Anchor>ab3ca4cabfd640180093e3a59456cc1ab</Anchor>
    <Abstract>Copy the input signal to the output.</Abstract>
    <DeclaredIn>Apan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeInstance</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::fx::Apan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_apan.html</Path>
    <Anchor>a43f48382fcacac14b51dd6a5feca81fd</Anchor>
    <Abstract>Instantiates given the contents of the &lt;effect&gt; block.</Abstract>
    <DeclaredIn>Apan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::fx::Eq</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::fx::Eq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_eq.html</Path>
    <Abstract>Effect which passes signal through a filter.</Abstract>
    <DeclaredIn>Eq.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Eq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_eq.html</Path>
    <Anchor>a88d7bbff6e3abccdb896c0697adeac79</Anchor>
    <Abstract>Initializes with the given sample rate.</Abstract>
    <DeclaredIn>Eq.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Eq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_eq.html</Path>
    <Anchor>a5e0a2b5031f1bafbf1993ea9bc408711</Anchor>
    <Abstract>Sets the maximum number of frames to render at a time.</Abstract>
    <DeclaredIn>Eq.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Eq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_eq.html</Path>
    <Anchor>a0680ea66f8218c86c5254f2591a6f838</Anchor>
    <Abstract>Reset the state to initial.</Abstract>
    <DeclaredIn>Eq.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Eq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_eq.html</Path>
    <Anchor>a3301c18beef87e1d696e271b3bbf8b0e</Anchor>
    <Abstract>Copy the input signal to the output.</Abstract>
    <DeclaredIn>Eq.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeInstance</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::fx::Eq</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_eq.html</Path>
    <Anchor>ac87942f98a37fd7c6615c0fbde44eb81</Anchor>
    <Abstract>Instantiates given the contents of the &lt;effect&gt; block.</Abstract>
    <DeclaredIn>Eq.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::fx::Filter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::fx::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_filter.html</Path>
    <Abstract>Effect which passes signal through a filter.</Abstract>
    <DeclaredIn>Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_filter.html</Path>
    <Anchor>acc6bc46d9258a092076f1c7b59beb114</Anchor>
    <Abstract>Initializes with the given sample rate.</Abstract>
    <DeclaredIn>Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_filter.html</Path>
    <Anchor>a4416b203111dee9ad24249fad4d6d8b7</Anchor>
    <Abstract>Sets the maximum number of frames to render at a time.</Abstract>
    <DeclaredIn>Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_filter.html</Path>
    <Anchor>a46f17ca2654004830810d34b1bbd4fe2</Anchor>
    <Abstract>Reset the state to initial.</Abstract>
    <DeclaredIn>Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_filter.html</Path>
    <Anchor>a44f15ced8d7bd5f04bab10c24470dbe6</Anchor>
    <Abstract>Copy the input signal to the output.</Abstract>
    <DeclaredIn>Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeInstance</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::fx::Filter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_filter.html</Path>
    <Anchor>afbf44d7e238cb8571642cdff226b57f9</Anchor>
    <Abstract>Instantiates given the contents of the &lt;effect&gt; block.</Abstract>
    <DeclaredIn>Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::fx::Gain</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::fx::Gain</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_gain.html</Path>
    <Abstract>Gain effect.</Abstract>
    <DeclaredIn>Gain.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Gain</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_gain.html</Path>
    <Anchor>a6eb1ff556b75644830849e9929c6e941</Anchor>
    <Abstract>Initializes with the given sample rate.</Abstract>
    <DeclaredIn>Gain.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Gain</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_gain.html</Path>
    <Anchor>a8b6d1404b181454bcdf6195838e9fa3c</Anchor>
    <Abstract>Sets the maximum number of frames to render at a time.</Abstract>
    <DeclaredIn>Gain.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Gain</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_gain.html</Path>
    <Anchor>adb6063bd4bf59c6408f1d6752b65bb96</Anchor>
    <Abstract>Reset the state to initial.</Abstract>
    <DeclaredIn>Gain.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Gain</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_gain.html</Path>
    <Anchor>a7bba2b89beaacae00d7dae3e5e5c050e</Anchor>
    <Abstract>Copy the input signal to the output.</Abstract>
    <DeclaredIn>Gain.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeInstance</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::fx::Gain</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_gain.html</Path>
    <Anchor>a0782505c1fa730c3dfdb5c62a88a441d</Anchor>
    <Abstract>Instantiates given the contents of the &lt;effect&gt; block.</Abstract>
    <DeclaredIn>Gain.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::fx::Limiter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::fx::Limiter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_limiter.html</Path>
    <Abstract>Limiter effect.</Abstract>
    <DeclaredIn>Limiter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Limiter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_limiter.html</Path>
    <Anchor>a83fb4220135fc55ac24ab5ef79e7810d</Anchor>
    <Abstract>Initializes with the given sample rate.</Abstract>
    <DeclaredIn>Limiter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Limiter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_limiter.html</Path>
    <Anchor>a27cf3246530420c368a658303a69e03f</Anchor>
    <Abstract>Sets the maximum number of frames to render at a time.</Abstract>
    <DeclaredIn>Limiter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Limiter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_limiter.html</Path>
    <Anchor>aa3555bc0a7199f3d45b1d7ff9a1914c1</Anchor>
    <Abstract>Reset the state to initial.</Abstract>
    <DeclaredIn>Limiter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Limiter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_limiter.html</Path>
    <Anchor>a4c7023d9a7e232fae0ba70f21e06261f</Anchor>
    <Abstract>Computes a cycle of the effect in stereo.</Abstract>
    <DeclaredIn>Limiter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeInstance</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::fx::Limiter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_limiter.html</Path>
    <Anchor>a7af240a175bf40d6948f6ebd3e832c50</Anchor>
    <Abstract>Instantiates given the contents of the &lt;effect&gt; block.</Abstract>
    <DeclaredIn>Limiter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::fx::Lofi</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::fx::Lofi</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_lofi.html</Path>
    <Abstract>Bit crushing effect.</Abstract>
    <DeclaredIn>Lofi.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Lofi</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_lofi.html</Path>
    <Anchor>a3eecd14176e75a7a850129942e06237f</Anchor>
    <Abstract>Initializes with the given sample rate.</Abstract>
    <DeclaredIn>Lofi.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Lofi</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_lofi.html</Path>
    <Anchor>abce0dca61b2506e8737f9584f5f86cb3</Anchor>
    <Abstract>Sets the maximum number of frames to render at a time.</Abstract>
    <DeclaredIn>Lofi.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Lofi</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_lofi.html</Path>
    <Anchor>a27a9c6bee804091793a18a25846a6eb7</Anchor>
    <Abstract>Reset the state to initial.</Abstract>
    <DeclaredIn>Lofi.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Lofi</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_lofi.html</Path>
    <Anchor>a9beb18f31c675aa16263b4be657aa64a</Anchor>
    <Abstract>Computes a cycle of the effect in stereo.</Abstract>
    <DeclaredIn>Lofi.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeInstance</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::fx::Lofi</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_lofi.html</Path>
    <Anchor>afbe2d99a926a16a1812ef25beb48e5fe</Anchor>
    <Abstract>Instantiates given the contents of the &lt;effect&gt; block.</Abstract>
    <DeclaredIn>Lofi.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::fx::Nothing</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::fx::Nothing</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_nothing.html</Path>
    <Abstract>Effect which does nothing.</Abstract>
    <DeclaredIn>Nothing.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Nothing</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_nothing.html</Path>
    <Anchor>a85c41fa8ff234d20179d0be2e1a5ccc6</Anchor>
    <Abstract>Initializes with the given sample rate.</Abstract>
    <DeclaredIn>Nothing.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Nothing</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_nothing.html</Path>
    <Anchor>a7804bb962e0c6d2dc4bc1c26392ecae5</Anchor>
    <Abstract>Sets the maximum number of frames to render at a time.</Abstract>
    <DeclaredIn>Nothing.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Nothing</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_nothing.html</Path>
    <Anchor>a23613d1f311a769b59ee1ea62b496409</Anchor>
    <Abstract>Reset the state to initial.</Abstract>
    <DeclaredIn>Nothing.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Nothing</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_nothing.html</Path>
    <Anchor>ace0665d430db771c41a78b530fc9e9c2</Anchor>
    <Abstract>Copy the input signal to the output.</Abstract>
    <DeclaredIn>Nothing.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::fx::Rectify</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::fx::Rectify</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_rectify.html</Path>
    <Abstract>Half-wave and full-wave rectifier.</Abstract>
    <DeclaredIn>Rectify.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Rectify</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_rectify.html</Path>
    <Anchor>aafb9c5e24e8ee86934265104245f5d23</Anchor>
    <Abstract>Initializes with the given sample rate.</Abstract>
    <DeclaredIn>Rectify.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Rectify</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_rectify.html</Path>
    <Anchor>a3d9e7435b7d66702cfcebeec178fa2d3</Anchor>
    <Abstract>Sets the maximum number of frames to render at a time.</Abstract>
    <DeclaredIn>Rectify.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Rectify</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_rectify.html</Path>
    <Anchor>ad83fd785ae848daacbb4861e9d449d8b</Anchor>
    <Abstract>Reset the state to initial.</Abstract>
    <DeclaredIn>Rectify.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Rectify</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_rectify.html</Path>
    <Anchor>a547de4f4cfb0d7bda31660f1a58eb7ce</Anchor>
    <Abstract>Copy the input signal to the output.</Abstract>
    <DeclaredIn>Rectify.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeInstance</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::fx::Rectify</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_rectify.html</Path>
    <Anchor>a43b04e0806c75514e82acacc2bc15de2</Anchor>
    <Abstract>Instantiates given the contents of the &lt;effect&gt; block.</Abstract>
    <DeclaredIn>Rectify.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::fx::Strings</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::fx::Strings</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_strings.html</Path>
    <Abstract>String resonance effect.</Abstract>
    <DeclaredIn>Strings.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Strings</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_strings.html</Path>
    <Anchor>af94a9b0ccb73f36be548eeae518851fd</Anchor>
    <Abstract>Initializes with the given sample rate.</Abstract>
    <DeclaredIn>Strings.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Strings</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_strings.html</Path>
    <Anchor>a7faddefa64e8069e1a51485e0bf85335</Anchor>
    <Abstract>Sets the maximum number of frames to render at a time.</Abstract>
    <DeclaredIn>Strings.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Strings</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_strings.html</Path>
    <Anchor>ab41a40cf47284ba956c94b66cf3e9346</Anchor>
    <Abstract>Reset the state to initial.</Abstract>
    <DeclaredIn>Strings.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Strings</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_strings.html</Path>
    <Anchor>a119b06feea08adfd2cbc9900e56c334e</Anchor>
    <Abstract>Copy the input signal to the output.</Abstract>
    <DeclaredIn>Strings.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeInstance</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::fx::Strings</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_strings.html</Path>
    <Anchor>a9de732029c19371db98c35b3db5bc3bc</Anchor>
    <Abstract>Instantiates given the contents of the &lt;effect&gt; block.</Abstract>
    <DeclaredIn>Strings.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::fx::Width</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::fx::Width</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_width.html</Path>
    <Abstract>Stereo width effect.</Abstract>
    <DeclaredIn>Width.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Width</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_width.html</Path>
    <Anchor>a21a9ed76d6511305d99b778931531a13</Anchor>
    <Abstract>Initializes with the given sample rate.</Abstract>
    <DeclaredIn>Width.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Width</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_width.html</Path>
    <Anchor>a5851a16ad034c3c3be9aaa03add6b40b</Anchor>
    <Abstract>Sets the maximum number of frames to render at a time.</Abstract>
    <DeclaredIn>Width.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Width</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_width.html</Path>
    <Anchor>a0279548276ee38c84a5eed5d2534b9c0</Anchor>
    <Abstract>Reset the state to initial.</Abstract>
    <DeclaredIn>Width.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::fx::Width</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_width.html</Path>
    <Anchor>a2dedee4a6af5df7f9aaca0b69f6e4105</Anchor>
    <Abstract>Copy the input signal to the output.</Abstract>
    <DeclaredIn>Width.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeInstance</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::fx::Width</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1fx_1_1_width.html</Path>
    <Anchor>a87e78df168c158ec7b915675296e4a03</Anchor>
    <Abstract>Instantiates given the contents of the &lt;effect&gt; block.</Abstract>
    <DeclaredIn>Width.h</DeclaredIn>
  </Token>
</Tokens>
