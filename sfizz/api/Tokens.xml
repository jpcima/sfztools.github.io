<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>sfizz_create_synth</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a463b1ec989c4632a5d3f6ba000a7de4c</Anchor>
    <Abstract>Creates a sfizz synth. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_free</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>abaee61a443deabf621f435b501500e1e</Anchor>
    <Abstract>Frees an existing sfizz synth. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_load_file</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>af55242966c4d4ae6ccf1d3faa80bfc12</Anchor>
    <Abstract>Loads an SFZ file. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_regions</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>ac96835f2e4ad2f9272b75727b666ee06</Anchor>
    <Abstract>Returns the number of regions in the currently loaded SFZ file. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_groups</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a1f48f36bd8c6019a742c2f4e0bc77c30</Anchor>
    <Abstract>Returns the number of groups in the currently loaded SFZ file. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_masters</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a147c6f9b27cc6668d79f7294d5a77971</Anchor>
    <Abstract>Returns the number of masters in the currently loaded SFZ file. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_curves</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a89c9d54d7ed0fbf3d9dd36a0a5701d28</Anchor>
    <Abstract>Returns the number of curves in the currently loaded SFZ file. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_preloaded_samples</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a25b3debbcdf1e9babf170b59fdc850d9</Anchor>
    <Abstract>Returns the number of preloaded samples for the current SFZ file. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_active_voices</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>acec4532bfd04af82f205922b4fec7a69</Anchor>
    <Abstract>Returns the number of active voices. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_samples_per_block</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a05c1993fe37dc48b38e646990914be5e</Anchor>
    <Abstract>Sets the expected number of samples per block. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_sample_rate</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>af0f8b0d64c668ec3ea933e1a3887c8c8</Anchor>
    <Abstract>Sets the sample rate for the synth. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_send_note_on</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a83507ae0a57f3f6a6d2e261b0d838601</Anchor>
    <Abstract>Send a note on event to the synth. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_send_note_off</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>ac2ffd934d2237580009595a4075ecf71</Anchor>
    <Abstract>Send a note off event to the synth. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_send_cc</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a8fc801aaefd86c4b8ff9c4fc0e937cbe</Anchor>
    <Abstract>Send a CC event to the synth. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_send_pitch_wheel</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a2f06affe178c4a9a47e9e81266b0fe92</Anchor>
    <Abstract>Send a pitch wheel event. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_send_aftertouch</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>af50f65810c2d279eb0c697f08b4bd2f8</Anchor>
    <Abstract>Send an aftertouch event. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_send_tempo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a9bde64a9b34824a38f2c662c9e98904b</Anchor>
    <Abstract>Send a tempo event. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_render_block</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a3a6b63cd5a344fbfee9aac9924526c76</Anchor>
    <Abstract>Render a block audio data into a stereo channel. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_preload_size</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a08bc2f0edf593d294754399a456f121c</Anchor>
    <Abstract>Get the size of the preloaded data. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_preload_size</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a60d4f0bc1ff11b2ad4da2afe6e496a42</Anchor>
    <Abstract>Sets the size of the preloaded data in number of floats (not bytes). </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_oversampling_factor</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a0c1b726f791047e32a94334301f40ebb</Anchor>
    <Abstract>Get the internal oversampling rate. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_oversampling_factor</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a09c7ffdc9f26c21a0d7dd97bebccb77c</Anchor>
    <Abstract>Set the internal oversampling rate. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_volume</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a8120595c2d3c0d785e8010728e076bc9</Anchor>
    <Abstract>Set the global instrument volume. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_volume</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a6055b7cc07e3bcfc3797b1a48466c40c</Anchor>
    <Abstract>Get the global instrument volume. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_set_num_voices</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a3b8d75648f4559835a93a4156669a996</Anchor>
    <Abstract>Sets the number of voices used by the synth. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_voices</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a1e3e264fba927016d4d83f50ed3eeeec</Anchor>
    <Abstract>Returns the number of voices. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_buffers</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a3ebb02917388939ce9b17ad8bd084be0</Anchor>
    <Abstract>Get the number of allocated buffers from the synth. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_num_bytes</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a73d40f7001b7496153347a38d903cb85</Anchor>
    <Abstract>Get the number of bytes allocated from the synth. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_enable_freewheeling</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a54865ae4cd54abd1500e860bf324e10d</Anchor>
    <Abstract>Enables freewheeling on the synth. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_disable_freewheeling</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>a8c42c49a6b073cfe76f29ccf4cb62e13</Anchor>
    <Abstract>Disables freewheeling on the synth. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfizz_get_unknown_opcodes</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>sfizz_8h.html</Path>
    <Anchor>ac0cb89abd2668ad218b4d17ed4f19fc2</Anchor>
    <Abstract>Get a comma separated list of unknown opcodes. </Abstract>
    <DeclaredIn>sfizz.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>db2pow</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>a752b4e294bd04340af53271c4f2875f1</Anchor>
    <Abstract>Converts db values into power (applies 10**(in/10)) </Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow2db</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>af01e41fe4cf56c50b1782c28b923446e</Anchor>
    <Abstract>Converts power values into dB (applies 10log10(in)) </Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>db2mag</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>ae6c8aa42d4e978cc8b46a1a3664d7c17</Anchor>
    <Abstract>Converts dB values to magnitude (applies 10**(in/20)) </Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mag2db</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>a150bd704b95b8d854bbc52102031cd43</Anchor>
    <Abstract>Converts magnitude values into dB (applies 20log10(in)) </Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>midiNoteFrequency</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>a5453a70c90a3c9f00502e2b62e534aed</Anchor>
    <Abstract>Converts a midi note to a frequency value. </Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clamp</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_math_helpers_8h.html</Path>
    <Anchor>aca20a33a33fccbc4953c3403e62fd372</Anchor>
    <Abstract>Clamps a value between bounds, including the bounds! </Abstract>
    <DeclaredIn>MathHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readInterleaved</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a91425402d9ab9ea06c43f2b50deceff7</Anchor>
    <Abstract>Read interleaved stereo data from a buffer and separate it in a left/right pair of buffers...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>writeInterleaved</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a187a894c21d22a6571c6fe2a9394228f</Anchor>
    <Abstract>Write a pair of left and right stereo input into a single buffer interleaved. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a1a5601af5f6d2113fdda2394fd7b00a0</Anchor>
    <Abstract>Fill a buffer with a value; comparable to std::fill in essence. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>acb3fd29a957ebca6df035ba30e155f35</Anchor>
    <Abstract>Exp math function. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>adc574b28974cd1bd8af7dee2c2cdb24f</Anchor>
    <Abstract>Log math function. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a92c69c4723a06f6e692ddfee094420fb</Anchor>
    <Abstract>sin math function </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a921cd12917ee9b0eb2a60b5d50f1881c</Anchor>
    <Abstract>cos math function </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>saturatingSFZIndex</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a3c7883329dc3ff5455577487a444b5e8</Anchor>
    <Abstract>Computes an integer index and 2 float coefficients corresponding to the linear interpolation procedur...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loopingSFZIndex</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>af6a4868395156fa7a5cd3a12277e3cab</Anchor>
    <Abstract>Computes an integer index and 2 float coefficients corresponding to the linear interpolation procedur...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a26799677f2d57c4714d2bc514a938b58</Anchor>
    <Abstract>Applies a scalar gain to the input. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a2e3b072204d32b7da439d392cbd2901f</Anchor>
    <Abstract>Applies a vector gain to an input stap. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a732911d2f0a67e80de4799cf480189c1</Anchor>
    <Abstract>Applies a scalar gain in-place on a span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a4de51e21a6941c416de0156d5c270f77</Anchor>
    <Abstract>Applies a vector gain in-place on a span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divide</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>add0737429e53441b7180f723e157442f</Anchor>
    <Abstract>Divide a vector by another vector. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divide</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>abe9b2f81370eed27891f98fe86e82ee1</Anchor>
    <Abstract>Divide a vector by another in place. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>multiplyAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>afc467c5a4f960d8a8afa9516e4020c5e</Anchor>
    <Abstract>Applies a gain to the input and add it on the output. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linearRamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a856b9e5f41439a7443e3fb6e010f8d13</Anchor>
    <Abstract>Compute a linear ramp blockwise between 2 values. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>multiplicativeRamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ae9103c48dd4d2a8339524f8f5d4136fa</Anchor>
    <Abstract>Compute a multiplicative ramp blockwise between 2 values. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ad0acbcd13727eee5b84f4a7e92377e40</Anchor>
    <Abstract>Add an input span to the output span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subtract</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a671c6bbf8866dbeac68ed3b887a705a5</Anchor>
    <Abstract>Subtract a value from a span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subtract</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>acb0d4e00d9e7d95051a90753331f2c53</Anchor>
    <Abstract>Subtract a span from another span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>af3f98787f6ed2987d28ffdc0ca5bdc4a</Anchor>
    <Abstract>Copy a span in another. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a3e5453bbc1c786fad5635026eebeaded</Anchor>
    <Abstract>Pans a mono signal left or right. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mean</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a699ab4ea2fc4d6179cbd6c4dd9a2f07b</Anchor>
    <Abstract>Computes the mean of a span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>meanSquared</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a4b3086cab227e08d1b22a4e385388127</Anchor>
    <Abstract>Computes the mean squared of a span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cumsum</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a7d68cfdcf6c011ab2b27841b2f37a33a</Anchor>
    <Abstract>Computes the cumulative sum of a span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfzInterpolationCast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a486b854fada90cb158ee8391466d42a7</Anchor>
    <Abstract>Computes the linear interpolation coefficients for a floating point index and extracts the integer in...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>diff</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>aea56d9a29c3d47631dfe237d7041d382</Anchor>
    <Abstract>Computes the differential of a span (successive differences). </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trimInPlace</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_string_view_helpers_8h.html</Path>
    <Anchor>a950bfd99293f5c81bfe061b77a9c01fc</Anchor>
    <Abstract>Removes the whitespace on a string_view in place. </Abstract>
    <DeclaredIn>StringViewHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trim</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_string_view_helpers_8h.html</Path>
    <Anchor>a99fe15ad89227a5573b4271c5c09162d</Anchor>
    <Abstract>Removes the whitespace on a string_view and return a new string_view. </Abstract>
    <DeclaredIn>StringViewHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>_string_view_helpers_8h.html</Path>
    <Anchor>a0d70224bb798d5b61584ca93597224a6</Anchor>
    <Abstract>Compile-time hashing function to be used mostly with switch/case statements. </Abstract>
    <DeclaredIn>StringViewHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_doxygen_pages_engine_description</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md_doxygen_pages_engine_description.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ScopedFTZ</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ScopedFTZ</Scope>
    </TokenIdentifier>
    <Path>class_scoped_f_t_z.html</Path>
    <Abstract>Flush floating points to zero and disable denormals as an RAII helper. </Abstract>
    <DeclaredIn>ScopedFTZ.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Random</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>Random</Scope>
    </TokenIdentifier>
    <Path>namespace_random.html</Path>
    <Abstract>Global random singletons. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Abstract>This file contains a pair of RAII helpers that handle some form of lock-free mutex-type protection ad...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a8d1e1f13e28869bb010ca42494d23ca7</Anchor>
    <Abstract>Read a value from the sfz file and cast it to the destination parameter along with a proper clamping ...</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readBooleanFromOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a1e79b5c1153af2378ddeb5ef1af2e108</Anchor>
    <Abstract>Read a boolean value from the sfz file and cast it to the destination parameter. </Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setValueFromOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a83aae00d3fce9c8f65838d7b3a1ee5e9</Anchor>
    <Abstract>Set a target parameter from an opcode value, with possibly a textual note rather than a number...</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setValueFromOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a31aeb210ef9bc2aae030c9979a8a2cc0</Anchor>
    <Abstract>Set a target parameter from an opcode value, with possibly a textual note rather than a number...</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setRangeEndFromOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a38e52ee55b8e40f517f2a43c57931aa6</Anchor>
    <Abstract>Set a target end of a range from an opcode value, with possibly a textual note rather than a number...</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setRangeStartFromOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a6a2f75efbbcdb47c66cf32f18bb207ba</Anchor>
    <Abstract>Set a target beginning of a range from an opcode value, with possibly a textual note rather than a nu...</Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setCCPairFromOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>aef36c198066be8bee85b445c483f71a1</Anchor>
    <Abstract>Set a CC modulation parameter from an opcode value. </Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>centsFactor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ace381c89be8ea56969614a371b7edae2</Anchor>
    <Abstract>Converts cents to a pitch ratio. </Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>normalizeCC</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a9b65015c18e6461f96cb9af4e30cdee8</Anchor>
    <Abstract>Normalize a CC value between (T)0.0 and (T)1.0. </Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>normalizePercents</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ac1f49ce61c8d1db977f17efc4ee199bf</Anchor>
    <Abstract>Normalize a percentage between 0 and 1. </Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>normalizeBend</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a8ce09dc9086cece4592820b163644829</Anchor>
    <Abstract>Normalize bends between -1 and 1. </Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>normalizeNegativePercents</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>abfcbb9f0d7899c187863d5e457a84fca</Anchor>
    <Abstract>Normalize a possibly negative percentage between -1 and 1. </Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ccSwitchedValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a11ed5c444b21ac2033875210cdd626ab</Anchor>
    <Abstract>If a cc switch exists for the value, returns the value with the CC modifier, otherwise returns the va...</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readNoteValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>afc410e944cee93f0c4a0cf44279ebe5d</Anchor>
    <Abstract>Convert a note in string to its equivalent midi note number. </Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>findHeader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a62f12e86de3f5c188a3a46840ded9030</Anchor>
    <Abstract>From a source view, find the next sfz header and its members and return them, while updating the sour...</Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>findOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a2fd5bcf4ef8db620c9ce8dd153637e80</Anchor>
    <Abstract>From a source view, find the next sfz member opcode and its value. </Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>findDefine</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a0154fe33ffa4619bd53939364a8cbe27</Anchor>
    <Abstract>Find an SFZ #define statement on a line and return the variable and value as views. </Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>findInclude</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ad493a0ef0d896c138a235f3b1d63d136</Anchor>
    <Abstract>Find an SFZ #include statement on a line and return included path. </Abstract>
    <DeclaredIn>SfzHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readInterleaved</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a91425402d9ab9ea06c43f2b50deceff7</Anchor>
    <Abstract>Read interleaved stereo data from a buffer and separate it in a left/right pair of buffers...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>writeInterleaved</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a187a894c21d22a6571c6fe2a9394228f</Anchor>
    <Abstract>Write a pair of left and right stereo input into a single buffer interleaved. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a1a5601af5f6d2113fdda2394fd7b00a0</Anchor>
    <Abstract>Fill a buffer with a value; comparable to std::fill in essence. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>acb3fd29a957ebca6df035ba30e155f35</Anchor>
    <Abstract>Exp math function. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>adc574b28974cd1bd8af7dee2c2cdb24f</Anchor>
    <Abstract>Log math function. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a92c69c4723a06f6e692ddfee094420fb</Anchor>
    <Abstract>sin math function </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a921cd12917ee9b0eb2a60b5d50f1881c</Anchor>
    <Abstract>cos math function </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>saturatingSFZIndex</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a3c7883329dc3ff5455577487a444b5e8</Anchor>
    <Abstract>Computes an integer index and 2 float coefficients corresponding to the linear interpolation procedur...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loopingSFZIndex</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>af6a4868395156fa7a5cd3a12277e3cab</Anchor>
    <Abstract>Computes an integer index and 2 float coefficients corresponding to the linear interpolation procedur...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a26799677f2d57c4714d2bc514a938b58</Anchor>
    <Abstract>Applies a scalar gain to the input. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a2e3b072204d32b7da439d392cbd2901f</Anchor>
    <Abstract>Applies a vector gain to an input stap. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a732911d2f0a67e80de4799cf480189c1</Anchor>
    <Abstract>Applies a scalar gain in-place on a span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a4de51e21a6941c416de0156d5c270f77</Anchor>
    <Abstract>Applies a vector gain in-place on a span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divide</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>add0737429e53441b7180f723e157442f</Anchor>
    <Abstract>Divide a vector by another vector. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divide</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>abe9b2f81370eed27891f98fe86e82ee1</Anchor>
    <Abstract>Divide a vector by another in place. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>multiplyAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>afc467c5a4f960d8a8afa9516e4020c5e</Anchor>
    <Abstract>Applies a gain to the input and add it on the output. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linearRamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a856b9e5f41439a7443e3fb6e010f8d13</Anchor>
    <Abstract>Compute a linear ramp blockwise between 2 values. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>multiplicativeRamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ae9103c48dd4d2a8339524f8f5d4136fa</Anchor>
    <Abstract>Compute a multiplicative ramp blockwise between 2 values. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>ad0acbcd13727eee5b84f4a7e92377e40</Anchor>
    <Abstract>Add an input span to the output span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subtract</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a671c6bbf8866dbeac68ed3b887a705a5</Anchor>
    <Abstract>Subtract a value from a span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subtract</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>acb0d4e00d9e7d95051a90753331f2c53</Anchor>
    <Abstract>Subtract a span from another span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>af3f98787f6ed2987d28ffdc0ca5bdc4a</Anchor>
    <Abstract>Copy a span in another. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a3e5453bbc1c786fad5635026eebeaded</Anchor>
    <Abstract>Pans a mono signal left or right. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mean</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a699ab4ea2fc4d6179cbd6c4dd9a2f07b</Anchor>
    <Abstract>Computes the mean of a span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>meanSquared</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a4b3086cab227e08d1b22a4e385388127</Anchor>
    <Abstract>Computes the mean squared of a span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cumsum</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a7d68cfdcf6c011ab2b27841b2f37a33a</Anchor>
    <Abstract>Computes the cumulative sum of a span. </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfzInterpolationCast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>a486b854fada90cb158ee8391466d42a7</Anchor>
    <Abstract>Computes the linear interpolation coefficients for a floating point index and extracts the integer in...</Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>diff</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz</Scope>
    </TokenIdentifier>
    <Path>namespacesfz.html</Path>
    <Anchor>aea56d9a29c3d47631dfe237d7041d382</Anchor>
    <Abstract>Computes the differential of a span (successive differences). </Abstract>
    <DeclaredIn>SIMDHelpers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::ADSREnvelope</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Abstract>Describe an attack/delay/sustain/release envelope that can produce its coefficient in a blockwise man...</Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>afc72281d7462d5874a2ee47f6d038918</Anchor>
    <Abstract>Resets the ADSR envelope. </Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNextValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>a655b834febc118a33306e518af65e8dd</Anchor>
    <Abstract>Get the next value for the envelope. </Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>aa94251ebed9584e93405c96302ba1996</Anchor>
    <Abstract>Get a block of values for the envelope. </Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>startRelease</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>a5d9062c524d09c0f9fe196de0ae492be</Anchor>
    <Abstract>Start the envelope release after a delay. </Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isSmoothing</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>aa1018d7601e3855a1f612c60d1f46a24</Anchor>
    <Abstract>Is the envelope smoothing? </Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRemainingDelay</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::ADSREnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_a_d_s_r_envelope.html</Path>
    <Anchor>a57f867c1ea82280867128becd6514d6f</Anchor>
    <Abstract>Get the remaining delay samples. </Abstract>
    <DeclaredIn>ADSREnvelope.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::AtomicDisabler</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::AtomicDisabler</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_atomic_disabler.html</Path>
    <Abstract>Simple class to set an atomic to false and automatically set it back to true on destruction. </Abstract>
    <DeclaredIn>AtomicGuard.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::AtomicGuard</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::AtomicGuard</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_atomic_guard.html</Path>
    <Abstract>Simple class to set an atomic to true and automatically set it back to false on destruction. </Abstract>
    <DeclaredIn>AtomicGuard.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::AudioBuffer</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Abstract>A class to handle a collection of buffers, where each buffer has the same size. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a4bafdd16884645d66848542d0341bbf4</Anchor>
    <Abstract>Construct a new Audio Buffer object. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>ab1dbcd9971a757c162f5e1593dee0747</Anchor>
    <Abstract>Construct a new Audio Buffer object with a specified number of channels and frames. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a30ae68dea76dbb15b85eddd8b2a2306a</Anchor>
    <Abstract>Resizes all the underlying buffers to a new size. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>channelWriter</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>ad2d9ef31c48d7398dede29da41c27f02</Anchor>
    <Abstract>Return an iterator to a specific channel with a non-const type. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>channelWriterEnd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a0d63ef28fa763af9ffac6bf4e4abbdc0</Anchor>
    <Abstract>Returns a sentinel for the channelWriter(channelIndex) iterator. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>channelReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>ae3a77506efa8f5e09572a137ec344604</Anchor>
    <Abstract>Returns a const iterator for a specific channel. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>channelReaderEnd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a30bd42620f320f93a166d8ffaf5d648e</Anchor>
    <Abstract>Returns a sentinel for the channelReader(channelIndex) iterator. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>afd97e15776c9d33e8857218e6b5906db</Anchor>
    <Abstract>Get a Span for a specific channel. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getConstSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a3830369c62967d83089c657f3dbcceb9</Anchor>
    <Abstract>Get a const Span object for a specific channel. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a2a176b89f64851bdc7134ddd02b5c115</Anchor>
    <Abstract>Add a channel to the buffer with the current number of frames. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumFrames</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a4eb0816e449da5c0a48f71e709bcaf95</Anchor>
    <Abstract>Get the number of elements in each buffer. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>ae0a24416d8b0b4009c8f20ca2ad9d517</Anchor>
    <Abstract>Get the number of channels. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>empty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a39e8d91018c396244e71f79e99b1fa5f</Anchor>
    <Abstract>Check if the buffers contains no elements. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSample</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a503864d51de64c8303aeea411efd8186</Anchor>
    <Abstract>Get a reference to a given element in a given buffer. </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_buffer.html</Path>
    <Anchor>a6d484a51580b0fb7db43ef8356a8582e</Anchor>
    <Abstract>Alias for getSample(...) </Abstract>
    <DeclaredIn>AudioBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::AudioSpan</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Abstract>Extension of the concept of spans to multiple channels. </Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>ac6b2e51b6f0088916d9d606ae5583887</Anchor>
    <Abstract>Construct a new Audio Span object. </Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a52c569fee04c4e62f01ff0ccd93c163b</Anchor>
    <Abstract>Construct a new Audio Span object from initializer lists. </Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a85579614ec6d52e961ad31a932cf04bc</Anchor>
    <Abstract>Construct a new Audio Span object from a list of absl::Span&lt;Type&gt; </Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>aad7bb493e7d7da0086c22319ce2f2f1e</Anchor>
    <Abstract>Get a raw pointer to a specific channel from the AudioSpan. </Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a734dc5a7ae6cc6d6ec8f84fb8c4bce13</Anchor>
    <Abstract>Get a Span&lt;Type&gt; corresponding to a specific channel. </Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getConstSpan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a25e9bf67a92487a895bdd32e1d47efce</Anchor>
    <Abstract>Get a Span&lt;const Type&gt; corresponding to a specific channel. </Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>meanSquared</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>aeb816775078a2ed606ca8c05c0ad6863</Anchor>
    <Abstract>Get the mean of the squared values of the AudioSpan elements on all channels. </Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fill</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>afe7915ff9acf885df62788d57709b933</Anchor>
    <Abstract>Fills all the elements of the AudioSpan with the same value. </Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a932b9a49a13aa7fc0a818ee70bec5bc9</Anchor>
    <Abstract>Apply a gain span elementwise to all channels in the AudioSpan. </Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>a9be0f4143ad160c2b228999ad6dd9d29</Anchor>
    <Abstract>Apply a gain to all channels in the AudioSpan. </Abstract>
    <DeclaredIn>AudioSpan.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spans</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>sfz::AudioSpan</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_audio_span.html</Path>
    <Anchor>ad8abff0f05730a73af659f5b4a5a20cc</Anchor>
    <Abstract>Construct a new Audio Span object from an AudioBuffer with a const Type. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Buffer</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Abstract>A heap buffer structure that tries to align its beginning and adds a small offset at the end for alig...</Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Buffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a2760746470b636632cd6090cfe008884</Anchor>
    <Abstract>Construct a new Buffer object that is empty. </Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Buffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a358a82cfc237822ffc4800adedc92635</Anchor>
    <Abstract>Construct a new Buffer object with size. </Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a39cf7ea601dc9d488d5f948f22f7c8a6</Anchor>
    <Abstract>Resizes the buffer. </Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a3fe4689394573298ac4471df3a82cff7</Anchor>
    <Abstract>Clear the buffers and frees the underlying memory. </Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Buffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a9b85f8a8b1be4471fd52ecb71b3fe20d</Anchor>
    <Abstract>Construct a new Buffer object from an existing one. </Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Buffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a403769cc8059d61478ad9bfd332b25b4</Anchor>
    <Abstract>Construct a new Buffer object by moving an existing one. </Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>counter</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>sfz::Buffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer.html</Path>
    <Anchor>a2c6dd38a79c8897a3d781d13f5ff46bd</Anchor>
    <Abstract>Return the buffer counter object. </Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::BufferCounter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::BufferCounter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_buffer_counter.html</Path>
    <Abstract>A buffer counting class that tries to track the memory usage. </Abstract>
    <DeclaredIn>Buffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::CCMap</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Abstract>A simple map that holds ValueType elements at different indices, and can return a default one if not ...</Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CCMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Anchor>a02a7160337593535d36ce12e0f338e45</Anchor>
    <Abstract>Construct a new CCMap object with the specified default value. </Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getWithDefault</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Anchor>a5fd9ade3276c6b444f22644365744c38</Anchor>
    <Abstract>Returns the held object at the index, or a default value if not present. </Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Anchor>a9bdcbeb36bbb2b288677754f2aa5062a</Anchor>
    <Abstract>Get the value at index key or emplace a new one if not present. </Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>empty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Anchor>a5f812431eaa247cd012a54801c19d969</Anchor>
    <Abstract>Is the container empty. </Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Anchor>aaed69e62746a5a4cbbab68072bbf2201</Anchor>
    <Abstract>Returns the value at index with bounds checking (and possibly exceptions) </Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::CCMap</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_c_c_map.html</Path>
    <Anchor>abcd2e6d710bb1bcf467562a956188b37</Anchor>
    <Abstract>Returns true if the container containers an element at index. </Abstract>
    <DeclaredIn>CCMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::EGDescription</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::EGDescription</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_e_g_description.html</Path>
    <Abstract>A description for an SFZ envelope generator, with its envelope parameters and possible CC modulation...</Abstract>
    <DeclaredIn>EGDescription.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getAttack</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::EGDescription</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_e_g_description.html</Path>
    <Anchor>addc5dfdda212845e6237c6d442e098d7</Anchor>
    <Abstract>Get the attack with possibly a CC modifier and a velocity modifier. </Abstract>
    <DeclaredIn>EGDescription.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDecay</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::EGDescription</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_e_g_description.html</Path>
    <Anchor>a14d78bd55a45456fb62688440572f005</Anchor>
    <Abstract>Get the decay with possibly a CC modifier and a velocity modifier. </Abstract>
    <DeclaredIn>EGDescription.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDelay</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::EGDescription</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_e_g_description.html</Path>
    <Anchor>a6fd3c588397ae7cb107112500dabc97a</Anchor>
    <Abstract>Get the delay with possibly a CC modifier and a velocity modifier. </Abstract>
    <DeclaredIn>EGDescription.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getHold</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::EGDescription</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_e_g_description.html</Path>
    <Anchor>a8c807b0dcce7312006dfdc0b211f3304</Anchor>
    <Abstract>Get the holding duration with possibly a CC modifier and a velocity modifier. </Abstract>
    <DeclaredIn>EGDescription.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRelease</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::EGDescription</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_e_g_description.html</Path>
    <Anchor>ab0cd0d848201aee132f87e67c9b2e9a1</Anchor>
    <Abstract>Get the release duration with possibly a CC modifier and a velocity modifier. </Abstract>
    <DeclaredIn>EGDescription.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStart</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::EGDescription</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_e_g_description.html</Path>
    <Anchor>abf6d6f682337a3d01dfcec8964c59226</Anchor>
    <Abstract>Get the starting level with possibly a CC modifier and a velocity modifier. </Abstract>
    <DeclaredIn>EGDescription.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSustain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::EGDescription</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_e_g_description.html</Path>
    <Anchor>a3e727fb33a048bdabfe623b5117ae4b0</Anchor>
    <Abstract>Get the sustain level with possibly a CC modifier and a velocity modifier. </Abstract>
    <DeclaredIn>EGDescription.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::EventEnvelope</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Abstract>Describes a simple envelope that can be polled in a blockwise manner. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EventEnvelope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a06f09b5a4bcc8211d4449ca73bad0449</Anchor>
    <Abstract>Construct a new linear envelope with a default memory size for incoming events. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EventEnvelope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>aa6e103f549540e1f8208671669f0a15f</Anchor>
    <Abstract>Construct a new linear envelope with a specific memory size for incoming events as well as a transfor...</Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setMaxCapacity</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a0e1dde09bc0070b87da9971c95b0d5e4</Anchor>
    <Abstract>Set the maximum memory size for incoming events. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setFunction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a476ee78b5fa80e28bc1a9efe7c02d244</Anchor>
    <Abstract>Set the transformation function for the value of incoming events. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>ad55bbf7f81be02f9d0503a8429b380ab</Anchor>
    <Abstract>Register a new event. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a1b20138c47700a0fd6f14f0acdbe923d</Anchor>
    <Abstract>Clear all events in memory. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a4779d5516ca8ec74b5556385c020d2fa</Anchor>
    <Abstract>Reset the envelope and clears the memory. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>ab109c9b466912ce48c340467785b970f</Anchor>
    <Abstract>Get a block of interpolated values between events previously registered using registerEvent. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getQuantizedBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>adef83d839e1d9dc2ab0f1ae9677f3152</Anchor>
    <Abstract>Get a block of interpolated values with a forced quantization. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::FilePool</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Abstract>This is a singleton-designed class that holds all the preloaded data as well as functions to request ...</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setRootDirectory</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a8af2ebf9ec28ebccf2e119a4b38eead7</Anchor>
    <Abstract>Set the root directory from which to search for files to load. </Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumPreloadedSamples</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a2fe514d5486bbdcfb5f30fd2d02694b4</Anchor>
    <Abstract>Get the number of preloaded sample files. </Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFileInformation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>aa874478a8b3074ca0cc7b126e9ee952b</Anchor>
    <Abstract>Get metadata information about a file. </Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>preloadFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a3430758f4b1ab97c27620de5fc727155</Anchor>
    <Abstract>Check that a file is preloaded with the proper offset bounds. </Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a1e9b651ad7b87601df6470cc6ecd9432</Anchor>
    <Abstract>Clear all preloaded files. </Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cleanupPromises</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a73f46234da3ccee6c40f4ddb354cfb01</Anchor>
    <Abstract>Moves the filled promises to a linear storage, and checks said linear storage for promises that are n...</Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFilePromise</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>afe1de498a6d099da3541ea488ef8f8c3</Anchor>
    <Abstract>Get a file promise. </Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreloadSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a11cef5fe1e26c129c3e6b3c19c3e6667</Anchor>
    <Abstract>Change the preloading size. </Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreloadSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a6900a9a2ec2c78e75105ee801f54fb0c</Anchor>
    <Abstract>Get the current preload size. </Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setOversamplingFactor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a5e30479bbe1cdeffb0edbe178a8160ba</Anchor>
    <Abstract>Set the oversampling factor. </Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOversamplingFactor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>ad68325ef56ebe42a5281cfa0693a643c</Anchor>
    <Abstract>Get the current oversampling factor. </Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>emptyFileLoadingQueues</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>a51e27530894aadd71f8ddd1e9c4cda65</Anchor>
    <Abstract>Empty the file loading queues without actually loading the files. </Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>waitForBackgroundLoading</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::FilePool</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_file_pool.html</Path>
    <Anchor>adfc4e696a615594e4b7e965d3e2c57f6</Anchor>
    <Abstract>Wait for the background loading to finish for all promises in the queue. </Abstract>
    <DeclaredIn>FilePool.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::HistoricalBuffer</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::HistoricalBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_historical_buffer.html</Path>
    <Abstract>A naive circular buffer which is supposed to hold power values and return the average of its content...</Abstract>
    <DeclaredIn>HistoricalBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::HistoricalBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_historical_buffer.html</Path>
    <Anchor>ad544c6dbad9f58a618f474b192937b69</Anchor>
    <Abstract>Resize the underlying buffer. </Abstract>
    <DeclaredIn>HistoricalBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>push</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::HistoricalBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_historical_buffer.html</Path>
    <Anchor>ac2d93a98435fa5be487bb299990ab26b</Anchor>
    <Abstract>Add a value to the buffer. </Abstract>
    <DeclaredIn>HistoricalBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getAverage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::HistoricalBuffer</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_historical_buffer.html</Path>
    <Anchor>a9fd4b03e228ffb6978813c6f9f9cf4bc</Anchor>
    <Abstract>Return the average of all the values in the buffer. </Abstract>
    <DeclaredIn>HistoricalBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::LinearEnvelope</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::LinearEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_linear_envelope.html</Path>
    <Abstract>Describes a simple linear envelope. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::LinearEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_linear_envelope.html</Path>
    <Anchor>aa43dcfdacede30a03aa6c7de1f23e906</Anchor>
    <Abstract>Get a block of interpolated values between events previously registered using registerEvent. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getQuantizedBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::LinearEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_linear_envelope.html</Path>
    <Anchor>a873f8d9e0547aa9812dc6d1c4300ce41</Anchor>
    <Abstract>Get a block of interpolated values with a forced quantization. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EventEnvelope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a06f09b5a4bcc8211d4449ca73bad0449</Anchor>
    <Abstract>Construct a new linear envelope with a default memory size for incoming events. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EventEnvelope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>aa6e103f549540e1f8208671669f0a15f</Anchor>
    <Abstract>Construct a new linear envelope with a specific memory size for incoming events as well as a transfor...</Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setMaxCapacity</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a0e1dde09bc0070b87da9971c95b0d5e4</Anchor>
    <Abstract>Set the maximum memory size for incoming events. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setFunction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a476ee78b5fa80e28bc1a9efe7c02d244</Anchor>
    <Abstract>Set the transformation function for the value of incoming events. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>ad55bbf7f81be02f9d0503a8429b380ab</Anchor>
    <Abstract>Register a new event. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a1b20138c47700a0fd6f14f0acdbe923d</Anchor>
    <Abstract>Clear all events in memory. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a4779d5516ca8ec74b5556385c020d2fa</Anchor>
    <Abstract>Reset the envelope and clears the memory. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::MidiState</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Abstract>Holds the current &quot;MIDI state&quot;, meaning the known state of all CCs currently, as well as the note vel...</Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>noteOnEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a3621ff211fcdaef0f4ca7c93d60d1901</Anchor>
    <Abstract>Update the state after a note on event. </Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNoteDuration</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>ac2c2b824d0aef00236645ccaa2fedca1</Anchor>
    <Abstract>Register a note off and get the note duration. </Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNoteVelocity</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a0c105a23260675c27d7e66b3f7dc4a2d</Anchor>
    <Abstract>Get the note on velocity for a given note. </Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pitchBendEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a9a23eed112561347f04f508d0992b825</Anchor>
    <Abstract>Register a pitch bend event. </Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPitchBend</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a365f0c4928d5bc372bd29f66264c86a8</Anchor>
    <Abstract>Get the pitch bend status on a channel. </Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ccEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>af842db8448e586a14f2e5df1bec4dc9c</Anchor>
    <Abstract>Register a CC event. </Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCCValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a12179d36ac37d65f3de4af12ed0de604</Anchor>
    <Abstract>Get the CC value for a specific channel and cc number. </Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCCArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>ad51014e33e86cb73d1927505bbedc11b</Anchor>
    <Abstract>Get the full CC status for a specific channel. </Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a8e4beb553db5ad28eaae35032cfd1967</Anchor>
    <Abstract>Reset the midi state (does not impact the last note on time) </Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resetAllControllers</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MidiState</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_midi_state.html</Path>
    <Anchor>a373d9097a2f5dac879ad8a6d34a7de6c</Anchor>
    <Abstract>Res. </Abstract>
    <DeclaredIn>MidiState.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::MultiplicativeEnvelope</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::MultiplicativeEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_multiplicative_envelope.html</Path>
    <Abstract>Describes a simple multiplicative envelope. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MultiplicativeEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_multiplicative_envelope.html</Path>
    <Anchor>a297bb80dc75b43c1d6539ea15eb806d6</Anchor>
    <Abstract>Get a block of interpolated values between events previously registered using registerEvent. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getQuantizedBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::MultiplicativeEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_multiplicative_envelope.html</Path>
    <Anchor>a9fee6a7eefcb66b275fc73f8cb11478f</Anchor>
    <Abstract>Get a block of interpolated values with a forced quantization. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EventEnvelope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a06f09b5a4bcc8211d4449ca73bad0449</Anchor>
    <Abstract>Construct a new linear envelope with a default memory size for incoming events. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EventEnvelope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>aa6e103f549540e1f8208671669f0a15f</Anchor>
    <Abstract>Construct a new linear envelope with a specific memory size for incoming events as well as a transfor...</Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setMaxCapacity</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a0e1dde09bc0070b87da9971c95b0d5e4</Anchor>
    <Abstract>Set the maximum memory size for incoming events. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setFunction</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a476ee78b5fa80e28bc1a9efe7c02d244</Anchor>
    <Abstract>Set the transformation function for the value of incoming events. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>ad55bbf7f81be02f9d0503a8429b380ab</Anchor>
    <Abstract>Register a new event. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a1b20138c47700a0fd6f14f0acdbe923d</Anchor>
    <Abstract>Clear all events in memory. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::EventEnvelope</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_event_envelope.html</Path>
    <Anchor>a4779d5516ca8ec74b5556385c020d2fa</Anchor>
    <Abstract>Reset the envelope and clears the memory. </Abstract>
    <DeclaredIn>EventEnvelopes.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::OnePoleFilter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::OnePoleFilter</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_one_pole_filter.html</Path>
    <Abstract>An implementation of a one pole filter. </Abstract>
    <DeclaredIn>OnePoleFilter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Opcode</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Opcode</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_opcode.html</Path>
    <Abstract>Opcode description class; should be very lightweight to use and move around. </Abstract>
    <DeclaredIn>Opcode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Range</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>sfz::Range</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_range.html</Path>
    <Abstract>This class holds a range with functions to clamp and test if a value is in the range. </Abstract>
    <DeclaredIn>Range.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPair</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Range</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_range.html</Path>
    <Anchor>ad63f967de9993809e8150222006312a4</Anchor>
    <Abstract>Get the range as an std::pair of the endpoints. </Abstract>
    <DeclaredIn>Range.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Range</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_range.html</Path>
    <Anchor>aef58ceb857807af2c9d2984d240d0aec</Anchor>
    <Abstract>Clamp a value within the range including the endpoints. </Abstract>
    <DeclaredIn>Range.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>containsWithEnd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Range</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_range.html</Path>
    <Anchor>a226914eac9fd1925d1f8271b49e51e82</Anchor>
    <Abstract>Checks if a value is in the range, including the endpoints. </Abstract>
    <DeclaredIn>Range.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Range</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_range.html</Path>
    <Anchor>af7c6a20406d1471b6ad1b14df5bbf6b9</Anchor>
    <Abstract>Checks if a value is in the range, excluding the end of the range. </Abstract>
    <DeclaredIn>Range.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shrinkIfSmaller</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Range</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_range.html</Path>
    <Anchor>aa087a74ec0e059cf61ee23ee5f29e58c</Anchor>
    <Abstract>Shrink the region if it is smaller than the provided start and end points. </Abstract>
    <DeclaredIn>Range.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Region</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Abstract>Regions are the basic building blocks for the SFZ parsing and handling code. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isRelease</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a7c2e846ea9b2c9d3249be1866229d838</Anchor>
    <Abstract>Triggers on release? </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGenerator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a8c59582c10085c1a9afb4c590955b9e6</Anchor>
    <Abstract>Is a generator (*sine or *silence mostly)? </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shouldLoop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>af42ac52319e1f55a00585727a7678290</Anchor>
    <Abstract>Is a looping region (at least potentially)? </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isSwitchedOn</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a387b44757f39315d1cf2fb87219b7bf4</Anchor>
    <Abstract>Given the current midi state, is the region switched on? </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerNoteOn</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a03b7557c437110de9bbe43847bfb4e15</Anchor>
    <Abstract>Register a new note on event. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerNoteOff</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a2e0706695d26ab544b1ac2ad067e8597</Anchor>
    <Abstract>Register a new note off event. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerCC</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a39de135658d150230935c059a468d3e0</Anchor>
    <Abstract>Register a new CC event. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerPitchWheel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a399b2cad35b2bcf85d33c2240cacde6b</Anchor>
    <Abstract>Register a new pitch wheel event. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerAftertouch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>afdf4eb9c42313e6b8a353ce91d502b69</Anchor>
    <Abstract>Register a new aftertouch event. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerTempo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>aad83bce0d4835e33725cc12eb21dcd8b</Anchor>
    <Abstract>Register tempo. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBasePitchVariation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a63bfa2d72c5f4c3da7c780cd00f8859e</Anchor>
    <Abstract>Get the base pitch of the region depending on which note has been pressed and at which velocity...</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNoteGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>ac87d6f68ce05169bef3796e29c629a70</Anchor>
    <Abstract>Get the note-related gain of the region depending on which note has been pressed and at which velocit...</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCrossfadeGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>aef0852afda4761c40b7b46eba9863cd4</Anchor>
    <Abstract>Get the additional crossfade gain of the region depending on the CC values. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBaseVolumedB</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>abe5ddb612bb580c99f78fe2f7ff46fdc</Anchor>
    <Abstract>Get the base volume of the region depending on which note has been pressed to trigger the region...</Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBaseGain</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>accd951ff140d13f8a11ae91a44d8233e</Anchor>
    <Abstract>Get the base gain of the region. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>velocityCurve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a5df77f0225e44a9c9c0f42f6c35188c7</Anchor>
    <Abstract>Computes the gain value related to the velocity of the note. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOffset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a1c23baafbce40d17f0b2725fd8c15683</Anchor>
    <Abstract>Get the region offset in samples. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDelay</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>a0a29c74ab6b97301ced899a177d63308</Anchor>
    <Abstract>Get the region delay in seconds. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trueSampleEnd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>aaa1b7641638771c44e0c83c7f6bfed66</Anchor>
    <Abstract>Get the index of the sample end, either natural end or forced loop. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseOpcode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>sfz::Region</Scope>
    </TokenIdentifier>
    <Path>structsfz_1_1_region.html</Path>
    <Anchor>ac7770f6af8c8879876199808e9a9757e</Anchor>
    <Abstract>Parse a new opcode into the region to fill in the proper parameters. </Abstract>
    <DeclaredIn>Region.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Synth</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Abstract>This class is the core of the sfizz library. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Synth</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>acb60deb7fdad7c8b8c1e8940048a1d88</Anchor>
    <Abstract>Construct a new Synth object with no voices. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Synth</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>aeaea30aa32e831a549a62bd4aec5785a</Anchor>
    <Abstract>Destructor. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Synth</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>add1e3279e1695846f8c3400dd72a7ef8</Anchor>
    <Abstract>Construct a new Synth object with a specified number of voices. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loadSfzFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ad07a23d1434c53bd6569a46a890d975c</Anchor>
    <Abstract>Empties the current regions and load a new SFZ file into the synth. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumRegions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ac49878f212ad1db7faffc1198867e1eb</Anchor>
    <Abstract>Get the current number of regions loaded. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumGroups</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a107adb64137047930d275b7fbd82e01b</Anchor>
    <Abstract>Get the current number of groups loaded. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumMasters</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a2852ea64f3e471fe5097e3cdc28eb577</Anchor>
    <Abstract>Get the current number of masters loaded. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumCurves</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a5fe3871a9dc4d1e9f089a64de1da8aac</Anchor>
    <Abstract>Get the current number of curves loaded. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRegionView</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a7f412e08363d9c51522f04c2b587728a</Anchor>
    <Abstract>Get a raw view into a specific region. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getVoiceView</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ab0bd46a930df0e8fe7106a745db55872</Anchor>
    <Abstract>Get a raw view into a specific voice. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getUnknownOpcodes</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ad83ae265b530f3a9e3aa5a97a4b069a1</Anchor>
    <Abstract>Get a list of unknown opcodes. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumPreloadedSamples</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a8bbbd2db16396a529dff87b36b6e3c5c</Anchor>
    <Abstract>Get the number of preloaded samples in the synth. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>acb7f5d0059c82d5354cb5c8e9e7b02a2</Anchor>
    <Abstract>Set the maximum size of the blocks for the callback. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>aaa9ee5acbc1c406472e41194f0088dc0</Anchor>
    <Abstract>Set the sample rate. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getVolume</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a5c693f7a10813afd3a9c06cefee6f99a</Anchor>
    <Abstract>Get the current value for the volume, in dB. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setVolume</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>adcc74a8304e6a13fde764c9928d2e385</Anchor>
    <Abstract>Set the value for the volume. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>noteOn</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>af2722a574cdc477d441bc37767237c24</Anchor>
    <Abstract>Send a note on event to the synth. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>noteOff</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a59b7e00aa54657d52bbccdb95daa3ff5</Anchor>
    <Abstract>Send a note off event to the synth. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a814241fbdb01a77a805337034f76f485</Anchor>
    <Abstract>Send a CC event to the synth. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pitchWheel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a8c9450d3dcdec76ce18024ebd76507a7</Anchor>
    <Abstract>Send a pitch bend event to the synth. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>aftertouch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a09d8c207f01af508656ed886a75118f6</Anchor>
    <Abstract>Send a aftertouch event to the synth. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tempo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ab54482367777b572cc9e62b108ffea25</Anchor>
    <Abstract>Send a tempo event to the synth. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>renderBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ad2532b5e7690b15086a80283f3cf6486</Anchor>
    <Abstract>Render an block of audio data in the buffer. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumActiveVoices</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ad49426c688ee68d9d73e9b66bb2bac84</Anchor>
    <Abstract>Get the number of active voices. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumVoices</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a7c1f04b7be90195ddb46099a42731349</Anchor>
    <Abstract>Get the total number of voices in the synth (the polyphony) </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNumVoices</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a6b577d397db6f577b6602b1e4f55d91f</Anchor>
    <Abstract>Change the number of voices (the polyphony) </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>garbageCollect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a21ac9843f358524a9421f48afc202af0</Anchor>
    <Abstract>Trigger a garbage collection, which removes the samples that are loaded by the FilePool after being r...</Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setOversamplingFactor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ac1fa08496724db42bf002fd68caacddb</Anchor>
    <Abstract>Set the oversampling factor to a new value. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOversamplingFactor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ae1581f2d663f7fa242bbda8282aaf8b1</Anchor>
    <Abstract>get the current oversampling factor </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreloadSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ac7268210d0e292b97b8e961fcc5f00d4</Anchor>
    <Abstract>Set the preloaded file size. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreloadSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ae9dc0ac9e3540ad64684f44aef6d578a</Anchor>
    <Abstract>get the current preloaded file size </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getAllocatedBuffers</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ab053c82caec16444daeaed6f27b44f95</Anchor>
    <Abstract>Gets the number of allocated buffers. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getAllocatedBytes</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ab03c02dcd32ff1856c85a875315370e8</Anchor>
    <Abstract>Gets the number of bytes allocated through the buffers. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>enableFreeWheeling</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>ae48e025723a2313e9ea78e3cd69376bf</Anchor>
    <Abstract>Enable freewheeling on the synth. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>disableFreeWheeling</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a437a8b23e6597254279898c2707f611b</Anchor>
    <Abstract>Disable freewheeling on the synth. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>callback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Synth</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_synth.html</Path>
    <Anchor>a84f8e1bb11b83516b5be76b64dc4c196</Anchor>
    <Abstract>The parser callback; this is called by the parent object each time a new region, group, master, global, curve or control set of opcodes appears in the parser. </Abstract>
    <DeclaredIn>Synth.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sfz::Voice</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Abstract>The SFZ voice are the polyphony holders. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Voice</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a82d3899e05531ff6ce843a8f684286a8</Anchor>
    <Abstract>Construct a new voice with the midistate singleton. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a926b7a7e7d1979e7ae20bf4869dee56e</Anchor>
    <Abstract>Change the sample rate of the voice. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a5d3be569e83f0011f9a49d0adebe8117</Anchor>
    <Abstract>Set the expected block size. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>af850a94b30882aa92c4ced438c2d593c</Anchor>
    <Abstract>Get the sample rate of the voice. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSamplesPerBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a5394dccc480fa35282b24d29ff3cd20b</Anchor>
    <Abstract>Get the expected block size. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>startVoice</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a4fdea019d6bc45fa273ee7b70acd4a04</Anchor>
    <Abstract>Start playing a region after a short delay for different triggers (note on, off, cc) ...</Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerNoteOff</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>af17b6c4d0a40500c0e7785b994da10d4</Anchor>
    <Abstract>Register a note-off event; this may trigger a release. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerCC</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a0cab9da8d20cd32d699264a80c61edba</Anchor>
    <Abstract>Register a CC event; this may trigger a release. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerPitchWheel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>addeee083b60f434534389635eb7bce58</Anchor>
    <Abstract>Register a pitch wheel event; for now this does nothing. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerAftertouch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a2a8b4f7af6150e6b489b0dba8a5144a3</Anchor>
    <Abstract>Register an aftertouch event; for now this does nothing. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerTempo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a9505cfc20b1c8c994ba8b10e497555a3</Anchor>
    <Abstract>Register a tempo event; for now this does nothing. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>checkOffGroup</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a0d12582ad73d0f3a61a2f7433e7b2d90</Anchor>
    <Abstract>Checks if the voice should be offed by another starting in the group specified. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>renderBlock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>acff7f23f39a29c9501ffee66ca90c9d5</Anchor>
    <Abstract>Render a block of data for this voice into the span. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isFree</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a85986785825cc15c0ec37fea3dfb4b96</Anchor>
    <Abstract>Is the voice free? </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>canBeStolen</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a06150d71de68d82cb17c5901fdc583b8</Anchor>
    <Abstract>Can the voice be &quot;stolen&quot; and reused (i.e. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTriggerNumber</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a1c2ae3b23508f971a422ffe86d779f36</Anchor>
    <Abstract>Get the number that triggered the voice (note number or cc number) </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTriggerChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>aff78f079865b09f62e2d3dd03d61e3b1</Anchor>
    <Abstract>Get the channel that triggered the voice. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTriggerValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a00c8871c5a8b4b2a9f459365b7953742</Anchor>
    <Abstract>Get the value that triggered the voice (note velocity or cc value) </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTriggerType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a3ecbfa53a4c4f8d1a3fcde2f6e2e818d</Anchor>
    <Abstract>Get the type of trigger. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a3c5fe85515b2edfa7228b75b134e5b89</Anchor>
    <Abstract>Reset the voice to its initial values. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMeanSquaredAverage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a22a85c50bde628e6add863bdcdc5ef59</Anchor>
    <Abstract>Get the mean squared power of the last rendered block. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSourcePosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a634100fd8b4799d1b620640c896a676a</Anchor>
    <Abstract>Get the position of the voice in the source, in samples. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRegion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>sfz::Voice</Scope>
    </TokenIdentifier>
    <Path>classsfz_1_1_voice.html</Path>
    <Anchor>a9d36436f417f8f52a34f51bd450d3af7</Anchor>
    <Abstract>Returns the region that is currently playing. </Abstract>
    <DeclaredIn>Voice.h</DeclaredIn>
  </Token>
</Tokens>
